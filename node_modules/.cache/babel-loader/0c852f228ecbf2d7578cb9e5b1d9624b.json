{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/pools/PoolPage/PoolAdminPanel.tsx\";\nimport React, { FormEvent, useMemo, useState } from 'react';\nimport { AdminControlledPoolInstructions } from '@project-serum/pool';\nimport { TokenInstructions } from '@project-serum/serum';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useConnection } from '../../../utils/connection';\nimport { useWallet } from '../../../utils/wallet';\nimport { getSelectedTokenAccountForMint, useTokenAccounts } from '../../../utils/markets';\nimport { sendTransaction } from '../../../utils/send';\nimport { notify } from '../../../utils/notifications';\nimport { Account, PublicKey, SystemProgram, Transaction } from '@solana/web3.js';\nimport { AutoComplete, Button, Input, Select, Tabs } from 'antd';\nimport { createAssociatedTokenAccount, getAssociatedTokenAddress } from '@project-serum/associated-token';\nimport { parseTokenMintData, useMintToTickers } from '../../../utils/tokens';\nimport BN from 'bn.js';\nimport { refreshAllCaches } from '../../../utils/fetch-loop';\nconst {\n  TabPane\n} = Tabs;\nconst {\n  Option\n} = Select;\nexport function PoolAdminPanel({\n  poolInfo\n}) {\n  return /*#__PURE__*/React.createElement(FloatingElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Pause/Unpause\",\n    key: \"pause\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PauseUnpauseTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Add Token\",\n    key: \"addAsset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AddAssetTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Remove Token\",\n    key: \"removeAsset\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RemoveAssetTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Deposit\",\n    key: \"deposit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DepositTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Withdraw\",\n    key: \"withdraw\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WithdrawTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Modify Fee\",\n    key: \"updateFee\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(UpdateFeeTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }))));\n}\n\nfunction PauseUnpauseTab({\n  poolInfo\n}) {\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [submitting, setSubmitting] = useState(false);\n\n  async function sendPause() {\n    if (!connected || !wallet) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const transaction = new Transaction();\n      transaction.add(AdminControlledPoolInstructions.pause(poolInfo));\n      await sendTransaction({\n        connection,\n        wallet,\n        transaction\n      });\n    } catch (e) {\n      notify({\n        message: 'Error pausing pool',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  async function sendUnpause() {\n    if (!connected || !wallet) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const transaction = new Transaction();\n      transaction.add(AdminControlledPoolInstructions.unpause(poolInfo));\n      await sendTransaction({\n        connection,\n        wallet,\n        transaction\n      });\n    } catch (e) {\n      notify({\n        message: 'Error unpausing pool',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: sendPause,\n    disabled: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, \"Pause\"), ' ', /*#__PURE__*/React.createElement(Button, {\n    onClick: sendUnpause,\n    disabled: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, \"Unpause\"));\n}\n\nfunction AddAssetTab({\n  poolInfo\n}) {\n  const connection = useConnection();\n  const [address, setAddress] = useState('');\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const canSubmit = connected && address;\n  const [onSubmit, submitting] = useOnSubmitHandler('adding asset to pool', async () => {\n    const mintAddress = new PublicKey(address);\n    const vaultAddress = await getAssociatedTokenAddress(poolInfo.state.vaultSigner, mintAddress);\n    const transaction = new Transaction();\n\n    if (!(await connection.getAccountInfo(vaultAddress)) && wallet) {\n      transaction.add(await createAssociatedTokenAccount(wallet.publicKey, poolInfo.state.vaultSigner, mintAddress));\n    }\n\n    transaction.add(AdminControlledPoolInstructions.addAsset(poolInfo, vaultAddress));\n    return [transaction, []];\n  });\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MintSelector, {\n    label: \"Token Mint Address\",\n    value: address,\n    onChange: value => setAddress(value),\n    style: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubmitButton, {\n    canSubmit: canSubmit,\n    submitting: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction RemoveAssetTab({\n  poolInfo\n}) {\n  const [address, setAddress] = useState('');\n  const {\n    connected\n  } = useWallet();\n  const canSubmit = connected && address;\n  const [onSubmit, submitting] = useOnSubmitHandler('removing asset from pool', async () => {\n    var _poolInfo$state$asset;\n\n    const mintAddress = new PublicKey(address);\n    const vaultAddress = (_poolInfo$state$asset = poolInfo.state.assets.find(asset => asset.mint.equals(mintAddress))) === null || _poolInfo$state$asset === void 0 ? void 0 : _poolInfo$state$asset.vaultAddress;\n\n    if (!vaultAddress) {\n      throw new Error('Asset not in pool');\n    }\n\n    const transaction = new Transaction();\n    transaction.add(AdminControlledPoolInstructions.removeAsset(poolInfo, vaultAddress));\n    return [transaction, []];\n  });\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MintInPoolSelector, {\n    poolInfo: poolInfo,\n    label: \"Token Mint Address\",\n    value: address,\n    onChange: value => setAddress(value),\n    style: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubmitButton, {\n    canSubmit: canSubmit,\n    submitting: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction DepositTab({\n  poolInfo\n}) {\n  const [address, setAddress] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit = connected && address && tokenAccounts && parseFloat(quantity);\n  const [onSubmit, submitting] = useOnSubmitHandler('depositing to pool', async () => {\n    var _poolInfo$state$asset2;\n\n    if (!wallet) {\n      throw new Error('Wallet is not connected');\n    }\n\n    const mintAddress = new PublicKey(address);\n    const vaultAddress = (_poolInfo$state$asset2 = poolInfo.state.assets.find(asset => asset.mint.equals(mintAddress))) === null || _poolInfo$state$asset2 === void 0 ? void 0 : _poolInfo$state$asset2.vaultAddress;\n\n    if (!vaultAddress) {\n      throw new Error('Asset not in pool');\n    }\n\n    const walletTokenAccount = getSelectedTokenAccountForMint(tokenAccounts, mintAddress);\n\n    if (!walletTokenAccount) {\n      throw new Error('Asset not in wallet');\n    }\n\n    const mintAccountInfo = await connection.getAccountInfo(mintAddress);\n\n    if (!mintAccountInfo) {\n      throw new Error('Mint not found');\n    }\n\n    const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\n    const parsedQuantity = Math.round(parseFloat(quantity) * 10 ** mintDecimals);\n    const wrappedSolAccount = mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) && walletTokenAccount.pubkey.equals(wallet.publicKey) ? new Account() : null;\n    const transaction = new Transaction();\n    const signers = [];\n\n    if (wrappedSolAccount) {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        lamports: parsedQuantity + 2.04e6,\n        newAccountPubkey: wrappedSolAccount.publicKey,\n        programId: TokenInstructions.TOKEN_PROGRAM_ID,\n        space: 165\n      }), TokenInstructions.initializeAccount({\n        account: wrappedSolAccount.publicKey,\n        mint: TokenInstructions.WRAPPED_SOL_MINT,\n        owner: wallet.publicKey\n      }), TokenInstructions.transfer({\n        source: wrappedSolAccount.publicKey,\n        destination: vaultAddress,\n        amount: parsedQuantity,\n        owner: wallet.publicKey\n      }), TokenInstructions.closeAccount({\n        source: wrappedSolAccount.publicKey,\n        destination: walletTokenAccount.pubkey,\n        owner: wallet.publicKey\n      }));\n      signers.push(wrappedSolAccount);\n    } else {\n      transaction.add(TokenInstructions.transfer({\n        source: walletTokenAccount.pubkey,\n        destination: vaultAddress,\n        amount: parsedQuantity,\n        owner: wallet.publicKey\n      }));\n    }\n\n    return [transaction, signers];\n  }, true);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MintInPoolSelector, {\n    poolInfo: poolInfo,\n    label: \"Token Mint Address\",\n    value: address,\n    onChange: value => setAddress(value),\n    style: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    addonBefore: /*#__PURE__*/React.createElement(React.Fragment, null, \"Quantity\"),\n    value: quantity,\n    onChange: e => setQuantity(e.target.value.trim()),\n    style: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubmitButton, {\n    canSubmit: canSubmit,\n    submitting: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction WithdrawTab({\n  poolInfo\n}) {\n  const [address, setAddress] = useState('');\n  const [quantity, setQuantity] = useState('');\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit = connected && address && tokenAccounts && parseFloat(quantity);\n  const [onSubmit, submitting] = useOnSubmitHandler('withdrawing from pool', async () => {\n    var _poolInfo$state$asset3;\n\n    if (!wallet) {\n      throw new Error('Wallet is not connected');\n    }\n\n    const mintAddress = new PublicKey(address);\n    const vaultAddress = (_poolInfo$state$asset3 = poolInfo.state.assets.find(asset => asset.mint.equals(mintAddress))) === null || _poolInfo$state$asset3 === void 0 ? void 0 : _poolInfo$state$asset3.vaultAddress;\n\n    if (!vaultAddress) {\n      throw new Error('Asset not in pool');\n    }\n\n    const walletTokenAccount = getSelectedTokenAccountForMint(tokenAccounts, mintAddress);\n\n    if (!walletTokenAccount) {\n      throw new Error('Asset not in wallet');\n    }\n\n    const mintAccountInfo = await connection.getAccountInfo(mintAddress);\n\n    if (!mintAccountInfo) {\n      throw new Error('Mint not found');\n    }\n\n    const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\n    const parsedQuantity = Math.round(parseFloat(quantity) * 10 ** mintDecimals);\n    const wrappedSolAccount = mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) && walletTokenAccount.pubkey.equals(wallet.publicKey) ? new Account() : null;\n    const transaction = new Transaction();\n    const signers = [];\n\n    if (wrappedSolAccount) {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: wallet.publicKey,\n        lamports: 2.04e6,\n        newAccountPubkey: wrappedSolAccount.publicKey,\n        programId: TokenInstructions.TOKEN_PROGRAM_ID,\n        space: 165\n      }), TokenInstructions.initializeAccount({\n        account: wrappedSolAccount.publicKey,\n        mint: TokenInstructions.WRAPPED_SOL_MINT,\n        owner: wallet.publicKey\n      }));\n      signers.push(wrappedSolAccount);\n    }\n\n    transaction.add(AdminControlledPoolInstructions.approveDelegate(poolInfo, vaultAddress, wallet.publicKey, new BN(parsedQuantity)));\n\n    if (wrappedSolAccount) {\n      transaction.add(TokenInstructions.transfer({\n        source: vaultAddress,\n        destination: wrappedSolAccount.publicKey,\n        amount: parsedQuantity,\n        owner: wallet.publicKey\n      }), TokenInstructions.closeAccount({\n        source: wrappedSolAccount.publicKey,\n        destination: walletTokenAccount.pubkey,\n        owner: wallet.publicKey\n      }));\n    } else {\n      transaction.add(TokenInstructions.transfer({\n        source: vaultAddress,\n        destination: walletTokenAccount.pubkey,\n        amount: parsedQuantity,\n        owner: wallet.publicKey\n      }));\n    }\n\n    return [transaction, signers];\n  });\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MintInPoolSelector, {\n    poolInfo: poolInfo,\n    label: \"Token Mint Address\",\n    value: address,\n    onChange: value => setAddress(value),\n    style: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    addonBefore: /*#__PURE__*/React.createElement(React.Fragment, null, \"Quantity\"),\n    value: quantity,\n    onChange: e => setQuantity(e.target.value.trim()),\n    style: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubmitButton, {\n    canSubmit: canSubmit,\n    submitting: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction UpdateFeeTab({\n  poolInfo\n}) {\n  const [feeRate, setFeeRate] = useState('');\n  const {\n    connected\n  } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit = connected && tokenAccounts && parseFloat(feeRate);\n  const [onSubmit, submitting] = useOnSubmitHandler('changing pool fee', async () => {\n    const transaction = new Transaction();\n    transaction.add(AdminControlledPoolInstructions.updateFee(poolInfo, Math.round(parseFloat(feeRate) * 1000000)));\n    return [transaction, []];\n  });\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    addonBefore: /*#__PURE__*/React.createElement(React.Fragment, null, \"Fee Rate\"),\n    value: feeRate,\n    onChange: e => setFeeRate(e.target.value.trim()),\n    style: {\n      marginBottom: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SubmitButton, {\n    canSubmit: canSubmit,\n    submitting: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction useOnSubmitHandler(description, makeTransaction, refresh = false) {\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [submitting, setSubmitting] = useState(false);\n\n  async function onSubmit(e) {\n    e.preventDefault();\n\n    if (submitting) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      if (!connected || !wallet) {\n        throw new Error('Wallet not connected');\n      }\n\n      const [transaction, signers] = await makeTransaction();\n      await sendTransaction({\n        connection,\n        wallet,\n        transaction,\n        signers\n      });\n\n      if (refresh) {\n        refreshAllCaches();\n      }\n    } catch (e) {\n      notify({\n        message: `Error ${description}`,\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return [onSubmit, submitting];\n}\n\nfunction SubmitButton({\n  canSubmit,\n  submitting\n}) {\n  const {\n    connected\n  } = useWallet();\n  return /*#__PURE__*/React.createElement(Button, {\n    htmlType: \"submit\",\n    type: \"primary\",\n    disabled: !canSubmit || submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 5\n    }\n  }, !connected ? 'Wallet not connected' : 'Submit');\n}\n\nfunction MintInPoolSelector({\n  poolInfo,\n  label,\n  value,\n  onChange,\n  style\n}) {\n  const mintToTickers = useMintToTickers();\n  return /*#__PURE__*/React.createElement(Input.Group, {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ant-input-group-addon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(Select, {\n    onChange: onChange,\n    value: value,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }\n  }, poolInfo.state.assets.map(asset => /*#__PURE__*/React.createElement(Option, {\n    value: asset.mint.toBase58(),\n    key: asset.mint.toBase58(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 11\n    }\n  }, mintToTickers[asset.mint.toBase58()] ? /*#__PURE__*/React.createElement(React.Fragment, null, mintToTickers[asset.mint.toBase58()], \" (\", asset.mint.toBase58(), \")\") : asset.mint.toBase58()))));\n}\n\nfunction MintSelector({\n  label,\n  style,\n  value,\n  onChange\n}) {\n  const mintToTickers = useMintToTickers();\n  const options = useMemo(() => {\n    return Object.entries(mintToTickers).filter(([mintAddress, ticker]) => mintAddress.includes(value) || ticker.toLowerCase().includes(value.toLowerCase())).map(([mintAddress, ticker]) => ({\n      value: mintAddress,\n      label: /*#__PURE__*/React.createElement(React.Fragment, null, ticker, \" (\", mintAddress, \")\")\n    }));\n  }, [mintToTickers, value]);\n  return /*#__PURE__*/React.createElement(Input.Group, {\n    style: style,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 571,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ant-input-group-addon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(AutoComplete, {\n    options: options,\n    value: value,\n    onChange: e => onChange(e),\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/pools/PoolPage/PoolAdminPanel.tsx"],"names":["React","FormEvent","useMemo","useState","AdminControlledPoolInstructions","TokenInstructions","FloatingElement","useConnection","useWallet","getSelectedTokenAccountForMint","useTokenAccounts","sendTransaction","notify","Account","PublicKey","SystemProgram","Transaction","AutoComplete","Button","Input","Select","Tabs","createAssociatedTokenAccount","getAssociatedTokenAddress","parseTokenMintData","useMintToTickers","BN","refreshAllCaches","TabPane","Option","PoolAdminPanel","poolInfo","PauseUnpauseTab","connection","wallet","connected","submitting","setSubmitting","sendPause","transaction","add","pause","e","message","description","type","sendUnpause","unpause","AddAssetTab","address","setAddress","canSubmit","onSubmit","useOnSubmitHandler","mintAddress","vaultAddress","state","vaultSigner","getAccountInfo","publicKey","addAsset","value","marginBottom","RemoveAssetTab","assets","find","asset","mint","equals","Error","removeAsset","DepositTab","quantity","setQuantity","tokenAccounts","parseFloat","walletTokenAccount","mintAccountInfo","mintDecimals","data","decimals","parsedQuantity","Math","round","wrappedSolAccount","WRAPPED_SOL_MINT","pubkey","signers","createAccount","fromPubkey","lamports","newAccountPubkey","programId","TOKEN_PROGRAM_ID","space","initializeAccount","account","owner","transfer","source","destination","amount","closeAccount","push","target","trim","WithdrawTab","approveDelegate","UpdateFeeTab","feeRate","setFeeRate","updateFee","makeTransaction","refresh","preventDefault","SubmitButton","MintInPoolSelector","label","onChange","style","mintToTickers","width","map","toBase58","MintSelector","options","Object","entries","filter","ticker","includes","toLowerCase"],"mappings":"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","sourcesContent":["import React, { FormEvent, useMemo, useState } from 'react';\nimport { AdminControlledPoolInstructions, PoolInfo } from '@project-serum/pool';\nimport { TokenInstructions } from '@project-serum/serum';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useConnection } from '../../../utils/connection';\nimport { useWallet } from '../../../utils/wallet';\nimport {\n  getSelectedTokenAccountForMint,\n  useTokenAccounts,\n} from '../../../utils/markets';\nimport { sendTransaction } from '../../../utils/send';\nimport { notify } from '../../../utils/notifications';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n} from '@solana/web3.js';\nimport { AutoComplete, Button, Input, Select, Tabs } from 'antd';\nimport {\n  createAssociatedTokenAccount,\n  getAssociatedTokenAddress,\n} from '@project-serum/associated-token';\nimport { parseTokenMintData, useMintToTickers } from '../../../utils/tokens';\nimport BN from 'bn.js';\nimport { refreshAllCaches } from '../../../utils/fetch-loop';\n\nconst { TabPane } = Tabs;\nconst { Option } = Select;\n\nexport function PoolAdminPanel({ poolInfo }: { poolInfo: PoolInfo }) {\n  return (\n    <FloatingElement>\n      <Tabs>\n        <TabPane tab=\"Pause/Unpause\" key=\"pause\">\n          <PauseUnpauseTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Add Token\" key=\"addAsset\">\n          <AddAssetTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Remove Token\" key=\"removeAsset\">\n          <RemoveAssetTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Deposit\" key=\"deposit\">\n          <DepositTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Withdraw\" key=\"withdraw\">\n          <WithdrawTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Modify Fee\" key=\"updateFee\">\n          <UpdateFeeTab poolInfo={poolInfo} />\n        </TabPane>\n      </Tabs>\n    </FloatingElement>\n  );\n}\n\ninterface TabParams {\n  poolInfo: PoolInfo;\n}\n\nfunction PauseUnpauseTab({ poolInfo }: TabParams) {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [submitting, setSubmitting] = useState(false);\n\n  async function sendPause() {\n    if (!connected || !wallet) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const transaction = new Transaction();\n      transaction.add(AdminControlledPoolInstructions.pause(poolInfo));\n      await sendTransaction({ connection, wallet, transaction });\n    } catch (e) {\n      notify({\n        message: 'Error pausing pool',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  async function sendUnpause() {\n    if (!connected || !wallet) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const transaction = new Transaction();\n      transaction.add(AdminControlledPoolInstructions.unpause(poolInfo));\n      await sendTransaction({ connection, wallet, transaction });\n    } catch (e) {\n      notify({\n        message: 'Error unpausing pool',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <>\n      <Button onClick={sendPause} disabled={submitting}>\n        Pause\n      </Button>{' '}\n      <Button onClick={sendUnpause} disabled={submitting}>\n        Unpause\n      </Button>\n    </>\n  );\n}\n\nfunction AddAssetTab({ poolInfo }: TabParams) {\n  const connection = useConnection();\n  const [address, setAddress] = useState('');\n  const { wallet, connected } = useWallet();\n  const canSubmit = connected && address;\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'adding asset to pool',\n    async () => {\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = await getAssociatedTokenAddress(\n        poolInfo.state.vaultSigner,\n        mintAddress,\n      );\n      const transaction = new Transaction();\n      if (!(await connection.getAccountInfo(vaultAddress)) && wallet) {\n        transaction.add(\n          await createAssociatedTokenAccount(\n            wallet.publicKey,\n            poolInfo.state.vaultSigner,\n            mintAddress,\n          ),\n        );\n      }\n      transaction.add(\n        AdminControlledPoolInstructions.addAsset(poolInfo, vaultAddress),\n      );\n      return [transaction, []];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintSelector\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction RemoveAssetTab({ poolInfo }: TabParams) {\n  const [address, setAddress] = useState('');\n  const { connected } = useWallet();\n  const canSubmit = connected && address;\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'removing asset from pool',\n    async () => {\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\n        asset.mint.equals(mintAddress),\n      )?.vaultAddress;\n      if (!vaultAddress) {\n        throw new Error('Asset not in pool');\n      }\n      const transaction = new Transaction();\n      transaction.add(\n        AdminControlledPoolInstructions.removeAsset(poolInfo, vaultAddress),\n      );\n      return [transaction, []];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintInPoolSelector\n        poolInfo={poolInfo}\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction DepositTab({ poolInfo }: TabParams) {\n  const [address, setAddress] = useState('');\n  const [quantity, setQuantity] = useState('');\n\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit =\n    connected && address && tokenAccounts && parseFloat(quantity);\n\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'depositing to pool',\n    async () => {\n      if (!wallet) {\n        throw new Error('Wallet is not connected');\n      }\n\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\n        asset.mint.equals(mintAddress),\n      )?.vaultAddress;\n      if (!vaultAddress) {\n        throw new Error('Asset not in pool');\n      }\n\n      const walletTokenAccount = getSelectedTokenAccountForMint(\n        tokenAccounts,\n        mintAddress,\n      );\n      if (!walletTokenAccount) {\n        throw new Error('Asset not in wallet');\n      }\n\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\n      if (!mintAccountInfo) {\n        throw new Error('Mint not found');\n      }\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\n      const parsedQuantity = Math.round(\n        parseFloat(quantity) * 10 ** mintDecimals,\n      );\n\n      const wrappedSolAccount =\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\n          ? new Account()\n          : null;\n\n      const transaction = new Transaction();\n      const signers: Account[] = [];\n      if (wrappedSolAccount) {\n        transaction.add(\n          SystemProgram.createAccount({\n            fromPubkey: wallet.publicKey,\n            lamports: parsedQuantity + 2.04e6,\n            newAccountPubkey: wrappedSolAccount.publicKey,\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\n            space: 165,\n          }),\n          TokenInstructions.initializeAccount({\n            account: wrappedSolAccount.publicKey,\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\n            owner: wallet.publicKey,\n          }),\n          TokenInstructions.transfer({\n            source: wrappedSolAccount.publicKey,\n            destination: vaultAddress,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n          TokenInstructions.closeAccount({\n            source: wrappedSolAccount.publicKey,\n            destination: walletTokenAccount.pubkey,\n            owner: wallet.publicKey,\n          }),\n        );\n        signers.push(wrappedSolAccount);\n      } else {\n        transaction.add(\n          TokenInstructions.transfer({\n            source: walletTokenAccount.pubkey,\n            destination: vaultAddress,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n        );\n      }\n      return [transaction, signers];\n    },\n    true,\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintInPoolSelector\n        poolInfo={poolInfo}\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <Input\n        addonBefore={<>Quantity</>}\n        value={quantity}\n        onChange={(e) => setQuantity(e.target.value.trim())}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction WithdrawTab({ poolInfo }: TabParams) {\n  const [address, setAddress] = useState('');\n  const [quantity, setQuantity] = useState('');\n\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit =\n    connected && address && tokenAccounts && parseFloat(quantity);\n\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'withdrawing from pool',\n    async () => {\n      if (!wallet) {\n        throw new Error('Wallet is not connected');\n      }\n\n      const mintAddress = new PublicKey(address);\n      const vaultAddress = poolInfo.state.assets.find((asset) =>\n        asset.mint.equals(mintAddress),\n      )?.vaultAddress;\n      if (!vaultAddress) {\n        throw new Error('Asset not in pool');\n      }\n\n      const walletTokenAccount = getSelectedTokenAccountForMint(\n        tokenAccounts,\n        mintAddress,\n      );\n      if (!walletTokenAccount) {\n        throw new Error('Asset not in wallet');\n      }\n\n      const mintAccountInfo = await connection.getAccountInfo(mintAddress);\n      if (!mintAccountInfo) {\n        throw new Error('Mint not found');\n      }\n      const mintDecimals = parseTokenMintData(mintAccountInfo.data).decimals;\n      const parsedQuantity = Math.round(\n        parseFloat(quantity) * 10 ** mintDecimals,\n      );\n\n      const wrappedSolAccount =\n        mintAddress.equals(TokenInstructions.WRAPPED_SOL_MINT) &&\n        walletTokenAccount.pubkey.equals(wallet.publicKey)\n          ? new Account()\n          : null;\n\n      const transaction = new Transaction();\n      const signers: Account[] = [];\n      if (wrappedSolAccount) {\n        transaction.add(\n          SystemProgram.createAccount({\n            fromPubkey: wallet.publicKey,\n            lamports: 2.04e6,\n            newAccountPubkey: wrappedSolAccount.publicKey,\n            programId: TokenInstructions.TOKEN_PROGRAM_ID,\n            space: 165,\n          }),\n          TokenInstructions.initializeAccount({\n            account: wrappedSolAccount.publicKey,\n            mint: TokenInstructions.WRAPPED_SOL_MINT,\n            owner: wallet.publicKey,\n          }),\n        );\n        signers.push(wrappedSolAccount);\n      }\n      transaction.add(\n        AdminControlledPoolInstructions.approveDelegate(\n          poolInfo,\n          vaultAddress,\n          wallet.publicKey,\n          new BN(parsedQuantity),\n        ),\n      );\n      if (wrappedSolAccount) {\n        transaction.add(\n          TokenInstructions.transfer({\n            source: vaultAddress,\n            destination: wrappedSolAccount.publicKey,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n          TokenInstructions.closeAccount({\n            source: wrappedSolAccount.publicKey,\n            destination: walletTokenAccount.pubkey,\n            owner: wallet.publicKey,\n          }),\n        );\n      } else {\n        transaction.add(\n          TokenInstructions.transfer({\n            source: vaultAddress,\n            destination: walletTokenAccount.pubkey,\n            amount: parsedQuantity,\n            owner: wallet.publicKey,\n          }),\n        );\n      }\n      return [transaction, signers];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <MintInPoolSelector\n        poolInfo={poolInfo}\n        label=\"Token Mint Address\"\n        value={address}\n        onChange={(value) => setAddress(value)}\n        style={{ marginBottom: 24 }}\n      />\n      <Input\n        addonBefore={<>Quantity</>}\n        value={quantity}\n        onChange={(e) => setQuantity(e.target.value.trim())}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction UpdateFeeTab({ poolInfo }: TabParams) {\n  const [feeRate, setFeeRate] = useState('');\n\n  const { connected } = useWallet();\n  const [tokenAccounts] = useTokenAccounts();\n  const canSubmit = connected && tokenAccounts && parseFloat(feeRate);\n\n  const [onSubmit, submitting] = useOnSubmitHandler(\n    'changing pool fee',\n    async () => {\n      const transaction = new Transaction();\n      transaction.add(\n        AdminControlledPoolInstructions.updateFee(\n          poolInfo,\n          Math.round(parseFloat(feeRate) * 1_000_000),\n        ),\n      );\n      return [transaction, []];\n    },\n  );\n\n  return (\n    <form onSubmit={onSubmit}>\n      <Input\n        addonBefore={<>Fee Rate</>}\n        value={feeRate}\n        onChange={(e) => setFeeRate(e.target.value.trim())}\n        style={{ marginBottom: 24 }}\n      />\n      <SubmitButton canSubmit={canSubmit} submitting={submitting} />\n    </form>\n  );\n}\n\nfunction useOnSubmitHandler(\n  description: string,\n  makeTransaction: () => Promise<[Transaction, Account[]]>,\n  refresh = false,\n): [(FormEvent) => void, boolean] {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [submitting, setSubmitting] = useState(false);\n\n  async function onSubmit(e: FormEvent) {\n    e.preventDefault();\n    if (submitting) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      if (!connected || !wallet) {\n        throw new Error('Wallet not connected');\n      }\n      const [transaction, signers] = await makeTransaction();\n      await sendTransaction({ connection, wallet, transaction, signers });\n      if (refresh) {\n        refreshAllCaches();\n      }\n    } catch (e) {\n      notify({\n        message: `Error ${description}`,\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return [onSubmit, submitting];\n}\n\nfunction SubmitButton({ canSubmit, submitting }) {\n  const { connected } = useWallet();\n  return (\n    <Button\n      htmlType=\"submit\"\n      type=\"primary\"\n      disabled={!canSubmit || submitting}\n    >\n      {!connected ? 'Wallet not connected' : 'Submit'}\n    </Button>\n  );\n}\n\nfunction MintInPoolSelector({\n  poolInfo,\n  label,\n  value,\n  onChange,\n  style,\n}: {\n  poolInfo: PoolInfo;\n  label: string;\n  value: string;\n  onChange: (string) => void;\n  style: any;\n}) {\n  const mintToTickers = useMintToTickers();\n  return (\n    <Input.Group style={style}>\n      <span className=\"ant-input-group-addon\">{label}</span>\n      <Select onChange={onChange} value={value} style={{ width: '100%' }}>\n        {poolInfo.state.assets.map((asset) => (\n          <Option value={asset.mint.toBase58()} key={asset.mint.toBase58()}>\n            {mintToTickers[asset.mint.toBase58()] ? (\n              <>\n                {mintToTickers[asset.mint.toBase58()]} ({asset.mint.toBase58()})\n              </>\n            ) : (\n              asset.mint.toBase58()\n            )}\n          </Option>\n        ))}\n      </Select>\n    </Input.Group>\n  );\n}\n\nfunction MintSelector({ label, style, value, onChange }) {\n  const mintToTickers = useMintToTickers();\n  const options = useMemo(() => {\n    return Object.entries(mintToTickers)\n      .filter(\n        ([mintAddress, ticker]) =>\n          mintAddress.includes(value) ||\n          ticker.toLowerCase().includes(value.toLowerCase()),\n      )\n      .map(([mintAddress, ticker]) => ({\n        value: mintAddress,\n        label: (\n          <>\n            {ticker} ({mintAddress})\n          </>\n        ),\n      }));\n  }, [mintToTickers, value]);\n  return (\n    <Input.Group style={style}>\n      <span className=\"ant-input-group-addon\">{label}</span>\n      <AutoComplete\n        options={options}\n        value={value}\n        onChange={(e) => onChange(e)}\n        style={{ width: '100%' }}\n      />\n    </Input.Group>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}