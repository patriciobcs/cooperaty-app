{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/components/StandaloneTokenAccountSelect.tsx\";\nimport React from 'react';\nimport { useSelectedTokenAccounts } from '../utils/markets';\nimport { Button, Col, Select, Typography } from 'antd';\nimport { CopyOutlined } from '@ant-design/icons';\nimport { abbreviateAddress } from '../utils/utils';\nimport { notify } from '../utils/notifications';\nexport default function StandaloneTokenAccountsSelect({\n  accounts,\n  mint,\n  label\n}) {\n  const [selectedTokenAccounts, setSelectedTokenAccounts] = useSelectedTokenAccounts();\n  let selectedValue;\n\n  if (mint && mint in selectedTokenAccounts) {\n    selectedValue = selectedTokenAccounts[mint];\n  } else if (accounts && (accounts === null || accounts === void 0 ? void 0 : accounts.length) > 0) {\n    selectedValue = accounts[0].pubkey.toBase58();\n  } else {\n    selectedValue = undefined;\n  }\n\n  const setTokenAccountForCoin = value => {\n    if (!mint) {\n      notify({\n        message: 'Error selecting token account',\n        description: 'Mint is undefined',\n        type: 'error'\n      });\n      return;\n    }\n\n    const newSelectedTokenAccounts = { ...selectedTokenAccounts\n    };\n    newSelectedTokenAccounts[mint] = value;\n    setSelectedTokenAccounts(newSelectedTokenAccounts);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, label && /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, \"Token account:\"), /*#__PURE__*/React.createElement(Col, {\n    span: label ? 13 : 21,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    style: {\n      width: '100%'\n    },\n    value: selectedValue,\n    onSelect: setTokenAccountForCoin,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, accounts === null || accounts === void 0 ? void 0 : accounts.map(account => /*#__PURE__*/React.createElement(Select.Option, {\n    key: account.pubkey.toBase58(),\n    value: account.pubkey.toBase58(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography.Text, {\n    code: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 15\n    }\n  }, label ? abbreviateAddress(account.pubkey, 8) : account.pubkey.toBase58()))))), /*#__PURE__*/React.createElement(Col, {\n    span: 2,\n    offset: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    shape: \"round\",\n    icon: /*#__PURE__*/React.createElement(CopyOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }),\n    size: 'small',\n    onClick: () => selectedValue && navigator.clipboard.writeText(selectedValue),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/components/StandaloneTokenAccountSelect.tsx"],"names":["React","useSelectedTokenAccounts","Button","Col","Select","Typography","CopyOutlined","abbreviateAddress","notify","StandaloneTokenAccountsSelect","accounts","mint","label","selectedTokenAccounts","setSelectedTokenAccounts","selectedValue","length","pubkey","toBase58","undefined","setTokenAccountForCoin","value","message","description","type","newSelectedTokenAccounts","width","map","account","navigator","clipboard","writeText"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TokenAccount } from '../utils/types';\nimport { useSelectedTokenAccounts } from '../utils/markets';\nimport { Button, Col, Select, Typography } from 'antd';\nimport { CopyOutlined } from '@ant-design/icons';\nimport { abbreviateAddress } from '../utils/utils';\nimport { notify } from '../utils/notifications';\n\nexport default function StandaloneTokenAccountsSelect({\n  accounts,\n  mint,\n  label,\n}: {\n  accounts: TokenAccount[] | null | undefined;\n  mint: string | undefined;\n  label?: boolean;\n}) {\n  const [\n    selectedTokenAccounts,\n    setSelectedTokenAccounts,\n  ] = useSelectedTokenAccounts();\n\n  let selectedValue: string | undefined;\n  if (mint && mint in selectedTokenAccounts) {\n    selectedValue = selectedTokenAccounts[mint];\n  } else if (accounts && accounts?.length > 0) {\n    selectedValue = accounts[0].pubkey.toBase58();\n  } else {\n    selectedValue = undefined;\n  }\n\n  const setTokenAccountForCoin = (value) => {\n    if (!mint) {\n      notify({\n        message: 'Error selecting token account',\n        description: 'Mint is undefined',\n        type: 'error',\n      });\n      return;\n    }\n    const newSelectedTokenAccounts = { ...selectedTokenAccounts };\n    newSelectedTokenAccounts[mint] = value;\n    setSelectedTokenAccounts(newSelectedTokenAccounts);\n  };\n\n  return (\n    <React.Fragment>\n      {label && <Col span={8}>Token account:</Col>}\n      <Col span={label ? 13 : 21}>\n        <Select\n          style={{ width: '100%' }}\n          value={selectedValue}\n          onSelect={setTokenAccountForCoin}\n        >\n          {accounts?.map((account) => (\n            <Select.Option\n              key={account.pubkey.toBase58()}\n              value={account.pubkey.toBase58()}\n            >\n              <Typography.Text code>\n                {label\n                  ? abbreviateAddress(account.pubkey, 8)\n                  : account.pubkey.toBase58()}\n              </Typography.Text>\n            </Select.Option>\n          ))}\n        </Select>\n      </Col>\n      <Col span={2} offset={1}>\n        <Button\n          shape=\"round\"\n          icon={<CopyOutlined />}\n          size={'small'}\n          onClick={() =>\n            selectedValue && navigator.clipboard.writeText(selectedValue)\n          }\n        />\n      </Col>\n    </React.Fragment>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}