{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simulateTransaction = void 0;\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\n\nasync function simulateTransaction(connection, transaction, commitment) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash( // @ts-ignore\n  connection._disableBlockhashCaching);\n  const signData = transaction.serializeMessage(); // @ts-ignore\n\n  const wireTransaction = transaction._serialize(signData);\n\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config = {\n    encoding: 'base64',\n    commitment\n  };\n  const args = [encodedTransaction, config]; // @ts-ignore\n\n  const res = await connection._rpcRequest('simulateTransaction', args);\n\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n\n  return res.result;\n}\n\nexports.simulateTransaction = simulateTransaction;","map":{"version":3,"sources":["../../src/simulate-transaction.ts"],"names":[],"mappings":";;;;;;AAQA;;AACO,eAAe,mBAAf,CACL,UADK,EAEL,WAFK,EAGL,UAHK,EAGiB;AAEtB;AACA,EAAA,WAAW,CAAC,eAAZ,GAA8B,MAAM,UAAU,CAAC,gBAAX,EAClC;AACA,EAAA,UAAU,CAAC,wBAFuB,CAApC;AAKA,QAAM,QAAQ,GAAG,WAAW,CAAC,gBAAZ,EAAjB,CARsB,CAStB;;AACA,QAAM,eAAe,GAAG,WAAW,CAAC,UAAZ,CAAuB,QAAvB,CAAxB;;AACA,QAAM,kBAAkB,GAAG,eAAe,CAAC,QAAhB,CAAyB,QAAzB,CAA3B;AACA,QAAM,MAAM,GAAQ;AAAE,IAAA,QAAQ,EAAE,QAAZ;AAAsB,IAAA;AAAtB,GAApB;AACA,QAAM,IAAI,GAAG,CAAC,kBAAD,EAAqB,MAArB,CAAb,CAbsB,CAetB;;AACA,QAAM,GAAG,GAAG,MAAM,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CAAlB;;AACA,MAAI,GAAG,CAAC,KAAR,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,qCAAqC,GAAG,CAAC,KAAJ,CAAU,OAAzD,CAAN;AACD;;AACD,SAAO,GAAG,CAAC,MAAX;AACD;;AAxBD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.simulateTransaction = void 0;\n/** Copy of Connection.simulateTransaction that takes a commitment parameter. */\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n}\nexports.simulateTransaction = simulateTransaction;\n//# sourceMappingURL=simulate-transaction.js.map"]},"metadata":{},"sourceType":"script"}