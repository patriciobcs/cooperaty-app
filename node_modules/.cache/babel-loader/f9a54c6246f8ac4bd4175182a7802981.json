{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAssociatedTokenAccount = exports.getAssociatedTokenAddress = exports.ASSOCIATED_TOKEN_PROGRAM_ID = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Program ID for the associated token account program. */\n\nexports.ASSOCIATED_TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/**\n * Derives the associated token address for the given wallet address and token mint.\n * @param owner Wallet address\n * @param mint Mint address\n */\n\nasync function getAssociatedTokenAddress(owner, mint) {\n  const [address] = await web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], exports.ASSOCIATED_TOKEN_PROGRAM_ID);\n  return address;\n}\n\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;\n/**\n * Instruction to create the associated token address for the given wallet address and token mint.\n *\n * @param payer Account to use to pay for fees\n * @param owner Wallet address for the new associated token address\n * @param mint Mint address for the new associated token address\n */\n\nasync function createAssociatedTokenAccount(payer, owner, mint) {\n  const associatedTokenAddress = await getAssociatedTokenAddress(owner, mint);\n  return new web3_js_1.TransactionInstruction({\n    keys: [{\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: owner,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3_js_1.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }],\n    programId: exports.ASSOCIATED_TOKEN_PROGRAM_ID\n  });\n}\n\nexports.createAssociatedTokenAccount = createAssociatedTokenAccount;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAOA,MAAM,gBAAgB,GAAG,IAAI,SAAA,CAAA,SAAJ,CACvB,6CADuB,CAAzB;AAIA;;AACa,OAAA,CAAA,2BAAA,GAA8B,IAAI,SAAA,CAAA,SAAJ,CACzC,8CADyC,CAA9B;AAIb;;;;AAIG;;AACI,eAAe,yBAAf,CACL,KADK,EAEL,IAFK,EAEU;AAEf,QAAM,CAAC,OAAD,IAAY,MAAM,SAAA,CAAA,SAAA,CAAU,kBAAV,CACtB,CAAC,KAAK,CAAC,QAAN,EAAD,EAAmB,gBAAgB,CAAC,QAAjB,EAAnB,EAAgD,IAAI,CAAC,QAAL,EAAhD,CADsB,EAEtB,OAAA,CAAA,2BAFsB,CAAxB;AAIA,SAAO,OAAP;AACD;;AATD,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAWA;;;;;;AAMG;;AACI,eAAe,4BAAf,CACL,KADK,EAEL,KAFK,EAGL,IAHK,EAGU;AAEf,QAAM,sBAAsB,GAAG,MAAM,yBAAyB,CAAC,KAAD,EAAQ,IAAR,CAA9D;AACA,SAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;AAChC,IAAA,IAAI,EAAE,CACJ;AAAE,MAAA,MAAM,EAAE,KAAV;AAAiB,MAAA,QAAQ,EAAE,IAA3B;AAAiC,MAAA,UAAU,EAAE;AAA7C,KADI,EAEJ;AAAE,MAAA,MAAM,EAAE,sBAAV;AAAkC,MAAA,QAAQ,EAAE,KAA5C;AAAmD,MAAA,UAAU,EAAE;AAA/D,KAFI,EAGJ;AAAE,MAAA,MAAM,EAAE,KAAV;AAAiB,MAAA,QAAQ,EAAE,KAA3B;AAAkC,MAAA,UAAU,EAAE;AAA9C,KAHI,EAIJ;AAAE,MAAA,MAAM,EAAE,IAAV;AAAgB,MAAA,QAAQ,EAAE,KAA1B;AAAiC,MAAA,UAAU,EAAE;AAA7C,KAJI,EAKJ;AAAE,MAAA,MAAM,EAAE,SAAA,CAAA,aAAA,CAAc,SAAxB;AAAmC,MAAA,QAAQ,EAAE,KAA7C;AAAoD,MAAA,UAAU,EAAE;AAAhE,KALI,EAMJ;AAAE,MAAA,MAAM,EAAE,gBAAV;AAA4B,MAAA,QAAQ,EAAE,KAAtC;AAA6C,MAAA,UAAU,EAAE;AAAzD,KANI,EAOJ;AAAE,MAAA,MAAM,EAAE,SAAA,CAAA,kBAAV;AAA8B,MAAA,QAAQ,EAAE,KAAxC;AAA+C,MAAA,UAAU,EAAE;AAA3D,KAPI,CAD0B;AAUhC,IAAA,SAAS,EAAE,OAAA,CAAA;AAVqB,GAA3B,CAAP;AAYD;;AAlBD,OAAA,CAAA,4BAAA,GAAA,4BAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAssociatedTokenAccount = exports.getAssociatedTokenAddress = exports.ASSOCIATED_TOKEN_PROGRAM_ID = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');\n/** Program ID for the associated token account program. */\nexports.ASSOCIATED_TOKEN_PROGRAM_ID = new web3_js_1.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n/**\n * Derives the associated token address for the given wallet address and token mint.\n * @param owner Wallet address\n * @param mint Mint address\n */\nasync function getAssociatedTokenAddress(owner, mint) {\n    const [address] = await web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], exports.ASSOCIATED_TOKEN_PROGRAM_ID);\n    return address;\n}\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;\n/**\n * Instruction to create the associated token address for the given wallet address and token mint.\n *\n * @param payer Account to use to pay for fees\n * @param owner Wallet address for the new associated token address\n * @param mint Mint address for the new associated token address\n */\nasync function createAssociatedTokenAccount(payer, owner, mint) {\n    const associatedTokenAddress = await getAssociatedTokenAddress(owner, mint);\n    return new web3_js_1.TransactionInstruction({\n        keys: [\n            { pubkey: payer, isSigner: true, isWritable: true },\n            { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n            { pubkey: owner, isSigner: false, isWritable: false },\n            { pubkey: mint, isSigner: false, isWritable: false },\n            { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n            { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n            { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        ],\n        programId: exports.ASSOCIATED_TOKEN_PROGRAM_ID,\n    });\n}\nexports.createAssociatedTokenAccount = createAssociatedTokenAccount;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}