{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTwitterRegistryData = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.getTwitterHandle = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bindings_1 = require(\"./bindings\");\n\nconst instructions_1 = require(\"./instructions\");\n\nconst state_1 = require(\"./state\");\n\nconst utils_1 = require(\"./utils\");\n\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('867BLob5b52i81SNaV9Awm5ejkZV6VGSv9SxLcwukDDJ'); // The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and it's name is irrelevant\n\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('AFrGkxNmVLBn3mKhvfJJABvm8RJkTtRhHDoaF97pQZaA'); // Signed by the authority and the payer\n\nasync function createVerifiedTwitterRegistry(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\npayerKey) {\n  const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n  const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n  const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n  space += 96; // Accounting for the Registry State Header\n\n  const instructions = [// Create user facing registry\n  instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, twitterHandleRegistryKey, verifiedPubkey, payerKey, hashedTwitterHandle, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(space)), new utils_1.Numberu32(space), undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n  ), // Create reverse lookup registry\n  instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, reverseRegistryKey, verifiedPubkey, payerKey, hashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(96 + 18)), new utils_1.Numberu32(96 + 18), // maximum length of a twitter handle\n  exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n  undefined, undefined), // Write the twitter handle into the reverse lookup registry\n  instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY)];\n  return instructions;\n}\n\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry; // Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\n\nasync function changeTwitterRegistryData(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\ninput_data) {\n  const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n  const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const instructions = [instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey)];\n  return instructions;\n}\n\nexports.changeTwitterRegistryData = changeTwitterRegistryData; // Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\n\nasync function changeVerifiedPubkey(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n  const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n  const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const currentHashedVerifiedPubkey = await utils_1.getHashedName(currentVerifiedPubkey.toString().concat(twitterHandle));\n  const currentReverseRegistryKey = await utils_1.getNameAccountKey(currentHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n  const newHashedVerifiedPubkey = await utils_1.getHashedName(newVerifiedPubkey.toString().concat(twitterHandle));\n  const newReverseRegistryKey = await utils_1.getNameAccountKey(newHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n  const instructions = [// Transfer the user-facing registry ownership\n  instructions_1.transferInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined), // Delete the current reverse registry\n  instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, currentReverseRegistryKey, payerKey, currentVerifiedPubkey), // Create the new reverse lookup registry\n  instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, newReverseRegistryKey, exports.TWITTER_VERIFICATION_AUTHORITY, payerKey, newHashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(18)), new utils_1.Numberu32(18), // maximum length of a twitter handle\n  exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n  undefined, undefined), // Write the twitter handle into the new reverse lookup registry\n  instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, newReverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY)];\n  return instructions;\n}\n\nexports.changeVerifiedPubkey = changeVerifiedPubkey; // Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\n\nasync function deleteTwitterRegistry(twitterHandle, verifiedPubkey) {\n  const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n  const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n  const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n  const instructions = [// Delete the user facing registry\n  instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey), // Delete the reverse registry\n  instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey)];\n  return instructions;\n}\n\nexports.deleteTwitterRegistry = deleteTwitterRegistry;\n\nasync function getTwitterHandle(connection, verifiedPubkey) {\n  const filters = [{\n    memcmp: {\n      offset: 32,\n      bytes: verifiedPubkey.toBase58()\n    }\n  }, {\n    memcmp: {\n      offset: bindings_1.VERIFICATION_AUTHORITY_OFFSET,\n      bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58()\n    }\n  }];\n  const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n  for (const f of filteredAccounts) {\n    if (f.accountInfo.data.length == 114) {\n      return f.accountInfo.data.slice(96, 114).toString();\n    }\n  }\n\n  throw 'Could not find the twitter handle';\n}\n\nexports.getTwitterHandle = getTwitterHandle; // Returns the key of the user-facing registry\n\nasync function getTwitterRegistryKey(twitter_handle) {\n  const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n  return await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n}\n\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\n\nasync function getTwitterRegistry(connection, twitter_handle) {\n  const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n  const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n  const registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n  return registry;\n}\n\nexports.getTwitterRegistry = getTwitterRegistry;\n\nasync function getTwitterRegistryData(connection, verifiedPubkey) {\n  // Does not give you the name, but is faster than getTwitterHandle + getTwitterRegistry to get the data\n  const filters = [{\n    memcmp: {\n      offset: 0,\n      bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes()\n    }\n  }, {\n    memcmp: {\n      offset: 32,\n      bytes: verifiedPubkey.toBytes()\n    }\n  }];\n  const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n\n  if (filteredAccounts.length > 1) {\n    throw 'Found more than one twitter handle';\n  }\n\n  return filteredAccounts[0].accountInfo.data;\n}\n\nexports.getTwitterRegistryData = getTwitterRegistryData;","map":{"version":3,"sources":["../src/twitter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTwitterRegistryData = exports.getTwitterRegistry = exports.getTwitterRegistryKey = exports.getTwitterHandle = exports.deleteTwitterRegistry = exports.changeVerifiedPubkey = exports.changeTwitterRegistryData = exports.createVerifiedTwitterRegistry = exports.TWITTER_ROOT_PARENT_REGISTRY_KEY = exports.TWITTER_VERIFICATION_AUTHORITY = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bindings_1 = require(\"./bindings\");\nconst instructions_1 = require(\"./instructions\");\nconst state_1 = require(\"./state\");\nconst utils_1 = require(\"./utils\");\nexports.TWITTER_VERIFICATION_AUTHORITY = new web3_js_1.PublicKey('867BLob5b52i81SNaV9Awm5ejkZV6VGSv9SxLcwukDDJ');\n// The address of the name registry that will be a parent to all twitter handle registries,\n// it should be owned by the TWITTER_VERIFICATION_AUTHORITY and it's name is irrelevant\nexports.TWITTER_ROOT_PARENT_REGISTRY_KEY = new web3_js_1.PublicKey('AFrGkxNmVLBn3mKhvfJJABvm8RJkTtRhHDoaF97pQZaA');\n// Signed by the authority and the payer\nasync function createVerifiedTwitterRegistry(connection, twitterHandle, verifiedPubkey, space, // The space that the user will have to write data into the verified registry\npayerKey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n    const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    space += 96; // Accounting for the Registry State Header\n    const instructions = [\n        // Create user facing registry\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, twitterHandleRegistryKey, verifiedPubkey, payerKey, hashedTwitterHandle, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(space)), new utils_1.Numberu32(space), undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY, exports.TWITTER_VERIFICATION_AUTHORITY // Twitter authority acts as owner of the parent for all user-facing registries\n        ),\n        // Create reverse lookup registry\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, reverseRegistryKey, verifiedPubkey, payerKey, hashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(96 + 18)), new utils_1.Numberu32(96 + 18), // maximum length of a twitter handle\n        exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n        undefined, undefined),\n        // Write the twitter handle into the reverse lookup registry\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY),\n    ];\n    return instructions;\n}\nexports.createVerifiedTwitterRegistry = createVerifiedTwitterRegistry;\n// Overwrite the data that is written in the user facing registry\n// Signed by the verified pubkey\nasync function changeTwitterRegistryData(twitterHandle, verifiedPubkey, offset, // The offset at which to write the input data into the NameRegistryData\ninput_data) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const instructions = [\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, new utils_1.Numberu32(offset), input_data, verifiedPubkey),\n    ];\n    return instructions;\n}\nexports.changeTwitterRegistryData = changeTwitterRegistryData;\n// Change the verified pubkey for a given twitter handle\n// Signed by the Authority, the verified pubkey and the payer\nasync function changeVerifiedPubkey(connection, twitterHandle, currentVerifiedPubkey, newVerifiedPubkey, payerKey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const currentHashedVerifiedPubkey = await utils_1.getHashedName(currentVerifiedPubkey.toString().concat(twitterHandle));\n    const currentReverseRegistryKey = await utils_1.getNameAccountKey(currentHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    const newHashedVerifiedPubkey = await utils_1.getHashedName(newVerifiedPubkey.toString().concat(twitterHandle));\n    const newReverseRegistryKey = await utils_1.getNameAccountKey(newHashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    const instructions = [\n        // Transfer the user-facing registry ownership\n        instructions_1.transferInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, newVerifiedPubkey, currentVerifiedPubkey, undefined),\n        // Delete the current reverse registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, currentReverseRegistryKey, payerKey, currentVerifiedPubkey),\n        // Create the new reverse lookup registry\n        instructions_1.createInstruction(bindings_1.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, newReverseRegistryKey, exports.TWITTER_VERIFICATION_AUTHORITY, payerKey, newHashedVerifiedPubkey, new utils_1.Numberu64(await connection.getMinimumBalanceForRentExemption(18)), new utils_1.Numberu32(18), // maximum length of a twitter handle\n        exports.TWITTER_VERIFICATION_AUTHORITY, // Twitter authority acts as class for all reverse-lookup registries\n        undefined, undefined),\n        // Write the twitter handle into the new reverse lookup registry\n        instructions_1.updateInstruction(bindings_1.NAME_PROGRAM_ID, newReverseRegistryKey, new utils_1.Numberu32(0), Buffer.from(twitterHandle), exports.TWITTER_VERIFICATION_AUTHORITY),\n    ];\n    return instructions;\n}\nexports.changeVerifiedPubkey = changeVerifiedPubkey;\n// Delete the verified registry for a given twitter handle\n// Signed by the verified pubkey\nasync function deleteTwitterRegistry(twitterHandle, verifiedPubkey) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitterHandle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const hashedVerifiedPubkey = await utils_1.getHashedName(verifiedPubkey.toString().concat(twitterHandle));\n    const reverseRegistryKey = await utils_1.getNameAccountKey(hashedVerifiedPubkey, exports.TWITTER_VERIFICATION_AUTHORITY, undefined);\n    const instructions = [\n        // Delete the user facing registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, twitterHandleRegistryKey, verifiedPubkey, verifiedPubkey),\n        // Delete the reverse registry\n        instructions_1.deleteInstruction(bindings_1.NAME_PROGRAM_ID, reverseRegistryKey, verifiedPubkey, verifiedPubkey),\n    ];\n    return instructions;\n}\nexports.deleteTwitterRegistry = deleteTwitterRegistry;\nasync function getTwitterHandle(connection, verifiedPubkey) {\n    const filters = [\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBase58(),\n            },\n        },\n        {\n            memcmp: {\n                offset: bindings_1.VERIFICATION_AUTHORITY_OFFSET,\n                bytes: exports.TWITTER_VERIFICATION_AUTHORITY.toBase58(),\n            },\n        },\n    ];\n    const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    for (const f of filteredAccounts) {\n        if (f.accountInfo.data.length == 114) {\n            return f.accountInfo.data.slice(96, 114).toString();\n        }\n    }\n    throw 'Could not find the twitter handle';\n}\nexports.getTwitterHandle = getTwitterHandle;\n// Returns the key of the user-facing registry\nasync function getTwitterRegistryKey(twitter_handle) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n    return await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n}\nexports.getTwitterRegistryKey = getTwitterRegistryKey;\nasync function getTwitterRegistry(connection, twitter_handle) {\n    const hashedTwitterHandle = await utils_1.getHashedName(twitter_handle);\n    const twitterHandleRegistryKey = await utils_1.getNameAccountKey(hashedTwitterHandle, undefined, exports.TWITTER_ROOT_PARENT_REGISTRY_KEY);\n    const registry = state_1.NameRegistryState.retrieve(connection, twitterHandleRegistryKey);\n    return registry;\n}\nexports.getTwitterRegistry = getTwitterRegistry;\nasync function getTwitterRegistryData(connection, verifiedPubkey) {\n    // Does not give you the name, but is faster than getTwitterHandle + getTwitterRegistry to get the data\n    const filters = [\n        {\n            memcmp: {\n                offset: 0,\n                bytes: exports.TWITTER_ROOT_PARENT_REGISTRY_KEY.toBytes(),\n            },\n        },\n        {\n            memcmp: {\n                offset: 32,\n                bytes: verifiedPubkey.toBytes(),\n            },\n        },\n    ];\n    const filteredAccounts = await utils_1.getFilteredProgramAccounts(connection, bindings_1.NAME_PROGRAM_ID, filters);\n    if (filteredAccounts.length > 1) {\n        throw 'Found more than one twitter handle';\n    }\n    return filteredAccounts[0].accountInfo.data;\n}\nexports.getTwitterRegistryData = getTwitterRegistryData;\n//# sourceMappingURL=twitter.js.map"]},"metadata":{},"sourceType":"script"}