{"ast":null,"code":"var _jsxFileName = \"/mnt/c/users/gianni/desktop/2/cooperaty-app/src/utils/referrer.tsx\";\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useConnection } from './connection';\nimport { PublicKey } from '@solana/web3.js';\nimport { NameRegistryState, getHashedName, getNameAccountKey, getTwitterRegistry } from '@solana/spl-name-service';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { useLocalStorageState } from './utils';\nconst ReferrerContext = React.createContext(null);\nexport const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\nexport async function findAssociatedTokenAddress(walletAddress, tokenMintAddress) {\n  return (await PublicKey.findProgramAddress([walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()], ASSOCIATED_TOKEN_PROGRAM_ID))[0];\n} // Address of the SOL TLD\n\nexport const SOL_TLD_AUTHORITY = new PublicKey('58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx');\nexport const getInputKey = async input => {\n  let hashed_input_name = await getHashedName(input);\n  let inputDomainKey = await getNameAccountKey(hashed_input_name, undefined, SOL_TLD_AUTHORITY);\n  return {\n    inputDomainKey: inputDomainKey,\n    hashedInputName: hashed_input_name\n  };\n};\nexport const useFeesAccountsFromRefCode = refCode => {\n  const connection = useConnection();\n  const [usdc, setUsdc] = useState(undefined);\n  const [usdt, setUsdt] = useState(undefined);\n  useEffect(() => {\n    const fn = async () => {\n      let usdcAddress = undefined;\n      let usdtAddress = undefined;\n\n      if (!refCode) {\n        setUsdc(process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS ? new PublicKey(process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS) : undefined);\n        setUsdt(process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS ? new PublicKey(process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS) : undefined);\n        return;\n      }\n\n      try {\n        let nameRegistryState;\n\n        if (refCode.includes('.sol')) {\n          const {\n            inputDomainKey\n          } = await getInputKey(refCode.replace('.sol', ''));\n          nameRegistryState = await NameRegistryState.retrieve(connection, inputDomainKey);\n        } else {\n          nameRegistryState = await getTwitterRegistry(connection, refCode);\n        }\n\n        usdcAddress = await findAssociatedTokenAddress(nameRegistryState.owner, USDC_MINT);\n        usdtAddress = await findAssociatedTokenAddress(nameRegistryState.owner, USDT_MINT);\n        const usdcAccountInfo = await connection.getAccountInfo(usdcAddress);\n        const usdtAccountInfo = await connection.getAccountInfo(usdtAddress);\n        if (!!(usdcAccountInfo === null || usdcAccountInfo === void 0 ? void 0 : usdcAccountInfo.data)) setUsdc(usdcAddress);\n        if (!!(usdtAccountInfo === null || usdtAccountInfo === void 0 ? void 0 : usdtAccountInfo.data)) setUsdt(usdtAddress);\n      } catch (err) {\n        console.warn(`Error getting refcode ${err}`);\n      }\n    };\n\n    fn();\n  }, [connection, refCode]);\n  return {\n    usdcRef: usdc,\n    usdtRef: usdt\n  };\n};\nexport const ReferrerProvider = ({\n  children\n}) => {\n  const allowRefLink = process.env.REACT_APP_ALLOW_REF_LINK === 'true';\n  const [refCode, setRefCode] = useLocalStorageState('refCode');\n  const {\n    usdcRef,\n    usdtRef\n  } = useFeesAccountsFromRefCode(allowRefLink ? refCode : undefined);\n  useEffect(() => {\n    if (!allowRefLink) setRefCode(null);\n  }, [allowRefLink, setRefCode]);\n  return /*#__PURE__*/React.createElement(ReferrerContext.Provider, {\n    value: {\n      usdcRef,\n      usdtRef,\n      setRefCode,\n      refCode,\n      allowRefLink\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, children);\n};\nexport const useReferrer = () => {\n  const context = useContext(ReferrerContext);\n  if (!context) throw new Error('Missing referrer context');\n  return {\n    usdcRef: context.usdcRef,\n    usdtRef: context.usdtRef,\n    setRefCode: context.setRefCode,\n    refCode: context.refCode,\n    allowRefLink: context.allowRefLink\n  };\n};","map":{"version":3,"sources":["/mnt/c/users/gianni/desktop/2/cooperaty-app/src/utils/referrer.tsx"],"names":["React","useContext","useEffect","useState","useConnection","PublicKey","NameRegistryState","getHashedName","getNameAccountKey","getTwitterRegistry","TOKEN_PROGRAM_ID","useLocalStorageState","ReferrerContext","createContext","ASSOCIATED_TOKEN_PROGRAM_ID","USDC_MINT","USDT_MINT","findAssociatedTokenAddress","walletAddress","tokenMintAddress","findProgramAddress","toBuffer","SOL_TLD_AUTHORITY","getInputKey","input","hashed_input_name","inputDomainKey","undefined","hashedInputName","useFeesAccountsFromRefCode","refCode","connection","usdc","setUsdc","usdt","setUsdt","fn","usdcAddress","usdtAddress","process","env","REACT_APP_USDC_REFERRAL_FEES_ADDRESS","REACT_APP_USDT_REFERRAL_FEES_ADDRESS","nameRegistryState","includes","replace","retrieve","owner","usdcAccountInfo","getAccountInfo","usdtAccountInfo","data","err","console","warn","usdcRef","usdtRef","ReferrerProvider","children","allowRefLink","REACT_APP_ALLOW_REF_LINK","setRefCode","useReferrer","context","Error"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { useConnection } from './connection';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n  NameRegistryState,\n  getHashedName,\n  getNameAccountKey,\n  getTwitterRegistry,\n} from '@solana/spl-name-service';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { useLocalStorageState } from './utils';\n\ninterface ReferrerContextValues {\n  usdcRef: PublicKey | undefined;\n  usdtRef: PublicKey | undefined;\n  setRefCode: (arg: any) => void;\n  refCode: string | undefined;\n  allowRefLink: boolean;\n}\n\nconst ReferrerContext: React.Context<null | ReferrerContextValues> = React.createContext<null | ReferrerContextValues>(\n  null,\n);\n\nexport const ASSOCIATED_TOKEN_PROGRAM_ID: PublicKey = new PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',\n);\n\nconst USDC_MINT = new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\nconst USDT_MINT = new PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\n\nexport async function findAssociatedTokenAddress(\n  walletAddress: PublicKey,\n  tokenMintAddress: PublicKey,\n): Promise<PublicKey> {\n  return (\n    await PublicKey.findProgramAddress(\n      [\n        walletAddress.toBuffer(),\n        TOKEN_PROGRAM_ID.toBuffer(),\n        tokenMintAddress.toBuffer(),\n      ],\n      ASSOCIATED_TOKEN_PROGRAM_ID,\n    )\n  )[0];\n}\n\n// Address of the SOL TLD\nexport const SOL_TLD_AUTHORITY = new PublicKey(\n  '58PwtjSDuFHuUkYjH9BYnnQKHfwo9reZhC2zMJv9JPkx',\n);\n\nexport const getInputKey = async (input: string) => {\n  let hashed_input_name = await getHashedName(input);\n  let inputDomainKey = await getNameAccountKey(\n    hashed_input_name,\n    undefined,\n    SOL_TLD_AUTHORITY,\n  );\n  return { inputDomainKey: inputDomainKey, hashedInputName: hashed_input_name };\n};\n\nexport const useFeesAccountsFromRefCode = (refCode: string | undefined) => {\n  const connection = useConnection();\n  const [usdc, setUsdc] = useState<PublicKey | undefined>(undefined);\n  const [usdt, setUsdt] = useState<PublicKey | undefined>(undefined);\n\n  useEffect(() => {\n    const fn = async () => {\n      let usdcAddress: undefined | PublicKey = undefined;\n      let usdtAddress: undefined | PublicKey = undefined;\n      if (!refCode) {\n        setUsdc(\n          process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS\n            ? new PublicKey(process.env.REACT_APP_USDC_REFERRAL_FEES_ADDRESS)\n            : undefined,\n        );\n        setUsdt(\n          process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS\n            ? new PublicKey(process.env.REACT_APP_USDT_REFERRAL_FEES_ADDRESS)\n            : undefined,\n        );\n        return;\n      }\n      try {\n        let nameRegistryState: NameRegistryState;\n        if (refCode.includes('.sol')) {\n          const { inputDomainKey } = await getInputKey(\n            refCode.replace('.sol', ''),\n          );\n          nameRegistryState = await NameRegistryState.retrieve(\n            connection,\n            inputDomainKey,\n          );\n        } else {\n          nameRegistryState = await getTwitterRegistry(connection, refCode);\n        }\n        usdcAddress = await findAssociatedTokenAddress(\n          nameRegistryState.owner,\n          USDC_MINT,\n        );\n        usdtAddress = await findAssociatedTokenAddress(\n          nameRegistryState.owner,\n          USDT_MINT,\n        );\n        const usdcAccountInfo = await connection.getAccountInfo(usdcAddress);\n        const usdtAccountInfo = await connection.getAccountInfo(usdtAddress);\n        if (!!usdcAccountInfo?.data) setUsdc(usdcAddress);\n        if (!!usdtAccountInfo?.data) setUsdt(usdtAddress);\n      } catch (err) {\n        console.warn(`Error getting refcode ${err}`);\n      }\n    };\n    fn();\n  }, [connection, refCode]);\n  return { usdcRef: usdc, usdtRef: usdt };\n};\n\nexport const ReferrerProvider = ({ children }) => {\n  const allowRefLink = process.env.REACT_APP_ALLOW_REF_LINK === 'true';\n  const [refCode, setRefCode] = useLocalStorageState('refCode');\n  const { usdcRef, usdtRef } = useFeesAccountsFromRefCode(\n    allowRefLink ? refCode : undefined,\n  );\n  useEffect(() => {\n    if (!allowRefLink) setRefCode(null);\n  }, [allowRefLink, setRefCode]);\n  return (\n    <ReferrerContext.Provider\n      value={{ usdcRef, usdtRef, setRefCode, refCode, allowRefLink }}\n    >\n      {children}\n    </ReferrerContext.Provider>\n  );\n};\n\nexport const useReferrer = () => {\n  const context = useContext(ReferrerContext);\n  if (!context) throw new Error('Missing referrer context');\n  return {\n    usdcRef: context.usdcRef,\n    usdtRef: context.usdtRef,\n    setRefCode: context.setRefCode,\n    refCode: context.refCode,\n    allowRefLink: context.allowRefLink,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}