{"ast":null,"code":"var _jsxFileName = \"/mnt/c/users/gianni/desktop/cooperaty-app - copia/src/components/UserInfoTable/BalancesTable.jsx\";\nimport { Button } from 'antd';\nimport React from 'react';\nimport { useTokenAccounts, getSelectedTokenAccountForMint } from '../../utils/markets';\nimport DataTable from '../layout/DataTable';\nimport { useSendConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport { settleFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nimport { useReferrer } from '../../utils/referrer';\nexport default function BalancesTable({\n  balances,\n  showMarket,\n  hideWalletBalance,\n  onSettleSuccess\n}) {\n  const [accounts] = useTokenAccounts();\n  const connection = useSendConnection();\n  const {\n    wallet\n  } = useWallet();\n  const {\n    usdcRef,\n    usdtRef\n  } = useReferrer();\n\n  async function onSettleFunds(market, openOrders) {\n    try {\n      await settleFunds({\n        market,\n        openOrders,\n        connection,\n        wallet,\n        baseCurrencyAccount: getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.baseMintAddress),\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(accounts, market === null || market === void 0 ? void 0 : market.quoteMintAddress),\n        usdcRef,\n        usdtRef\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error'\n      });\n      return;\n    }\n\n    onSettleSuccess && onSettleSuccess();\n  }\n\n  const columns = [showMarket ? {\n    title: 'Market',\n    dataIndex: 'marketName',\n    key: 'marketName'\n  } : null, {\n    title: 'Coin',\n    dataIndex: 'coin',\n    key: 'coin'\n  }, hideWalletBalance ? null : {\n    title: 'Wallet Balance',\n    dataIndex: 'wallet',\n    key: 'wallet'\n  }, {\n    title: 'Orders',\n    dataIndex: 'orders',\n    key: 'orders'\n  }, {\n    title: 'Unsettled',\n    dataIndex: 'unsettled',\n    key: 'unsettled'\n  }, {\n    key: 'action',\n    render: ({\n      market,\n      openOrders,\n      marketName\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'right'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      ghost: true,\n      style: {\n        marginRight: 12\n      },\n      onClick: () => onSettleFunds(market, openOrders),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, \"Settle \", marketName))\n  }].filter(x => x);\n  return /*#__PURE__*/React.createElement(DataTable, {\n    emptyLabel: \"No balances\",\n    dataSource: balances,\n    columns: columns,\n    pagination: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["/mnt/c/users/gianni/desktop/cooperaty-app - copia/src/components/UserInfoTable/BalancesTable.jsx"],"names":["Button","React","useTokenAccounts","getSelectedTokenAccountForMint","DataTable","useSendConnection","useWallet","settleFunds","notify","useReferrer","BalancesTable","balances","showMarket","hideWalletBalance","onSettleSuccess","accounts","connection","wallet","usdcRef","usdtRef","onSettleFunds","market","openOrders","baseCurrencyAccount","baseMintAddress","quoteCurrencyAccount","quoteMintAddress","e","message","description","type","columns","title","dataIndex","key","render","marketName","textAlign","marginRight","filter","x"],"mappings":"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","sourcesContent":["import { Button } from 'antd';\nimport React from 'react';\nimport {\n  useTokenAccounts,\n  getSelectedTokenAccountForMint,\n} from '../../utils/markets';\nimport DataTable from '../layout/DataTable';\nimport { useSendConnection } from '../../utils/connection';\nimport { useWallet } from '../../utils/wallet';\nimport { settleFunds } from '../../utils/send';\nimport { notify } from '../../utils/notifications';\nimport { useReferrer } from '../../utils/referrer';\n\nexport default function BalancesTable({\n  balances,\n  showMarket,\n  hideWalletBalance,\n  onSettleSuccess,\n}) {\n  const [accounts] = useTokenAccounts();\n  const connection = useSendConnection();\n  const { wallet } = useWallet();\n  const { usdcRef, usdtRef } = useReferrer();\n\n  async function onSettleFunds(market, openOrders) {\n    try {\n      await settleFunds({\n        market,\n        openOrders,\n        connection,\n        wallet,\n        baseCurrencyAccount: getSelectedTokenAccountForMint(\n          accounts,\n          market?.baseMintAddress,\n        ),\n        quoteCurrencyAccount: getSelectedTokenAccountForMint(\n          accounts,\n          market?.quoteMintAddress,\n        ),\n        usdcRef,\n        usdtRef,\n      });\n    } catch (e) {\n      notify({\n        message: 'Error settling funds',\n        description: e.message,\n        type: 'error',\n      });\n      return;\n    }\n    onSettleSuccess && onSettleSuccess();\n  }\n\n  const columns = [\n    showMarket\n      ? {\n          title: 'Market',\n          dataIndex: 'marketName',\n          key: 'marketName',\n        }\n      : null,\n    {\n      title: 'Coin',\n      dataIndex: 'coin',\n      key: 'coin',\n    },\n    hideWalletBalance\n      ? null\n      : {\n          title: 'Wallet Balance',\n          dataIndex: 'wallet',\n          key: 'wallet',\n        },\n    {\n      title: 'Orders',\n      dataIndex: 'orders',\n      key: 'orders',\n    },\n    {\n      title: 'Unsettled',\n      dataIndex: 'unsettled',\n      key: 'unsettled',\n    },\n    {\n      key: 'action',\n      render: ({ market, openOrders, marketName }) => (\n        <div style={{ textAlign: 'right' }}>\n          <Button\n            ghost\n            style={{ marginRight: 12 }}\n            onClick={() => onSettleFunds(market, openOrders)}\n          >\n            Settle {marketName}\n          </Button>\n        </div>\n      ),\n    },\n  ].filter((x) => x);\n  return (\n    <DataTable\n      emptyLabel=\"No balances\"\n      dataSource={balances}\n      columns={columns}\n      pagination={false}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}