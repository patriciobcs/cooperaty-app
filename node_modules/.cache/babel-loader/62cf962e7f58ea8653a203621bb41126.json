{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport { notify } from '../../utils/notifications';\nimport { DEFAULT_PUBLIC_KEY } from '../types';\nexport class MathWalletAdapter extends EventEmitter {\n  constructor() {\n    super();\n    this._publicKey = void 0;\n    this._onProcess = void 0;\n    this._connected = void 0;\n    this._onProcess = false;\n    this._connected = false;\n    this.connect = this.connect.bind(this);\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  async signAllTransactions(transactions) {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  get _provider() {\n    var _ref, _ref$solana;\n\n    if ((_ref = window) === null || _ref === void 0 ? void 0 : (_ref$solana = _ref.solana) === null || _ref$solana === void 0 ? void 0 : _ref$solana.isMathWallet) {\n      return window.solana;\n    }\n\n    return undefined;\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect() {\n    if (this._onProcess) {\n      return;\n    }\n\n    if (!this._provider) {\n      window.open('https://mathwallet.org/', '_blank');\n      notify({\n        message: 'Math Wallet Error',\n        description: 'Please install mathwallet'\n      });\n      return;\n    }\n\n    this._onProcess = true;\n\n    this._provider.getAccount().then(account => {\n      this._publicKey = new PublicKey(account);\n      this._connected = true;\n      this.emit('connect', this._publicKey);\n    }).catch(() => {\n      this.disconnect();\n    }).finally(() => {\n      this._onProcess = false;\n    });\n  }\n\n  disconnect() {\n    if (this._publicKey) {\n      this._publicKey = undefined;\n      this._connected = false;\n      this.emit('disconnect');\n    }\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/wallet-adapters/math/index.tsx"],"names":["EventEmitter","PublicKey","notify","DEFAULT_PUBLIC_KEY","MathWalletAdapter","constructor","_publicKey","_onProcess","_connected","connect","bind","connected","autoApprove","signAllTransactions","transactions","_provider","window","solana","isMathWallet","undefined","publicKey","signTransaction","transaction","open","message","description","getAccount","then","account","emit","catch","disconnect","finally"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,SAAT,QAAuC,iBAAvC;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,kBAAT,QAAkD,UAAlD;AAEA,OAAO,MAAMC,iBAAN,SAAgCJ,YAAhC,CAAsE;AAI3EK,EAAAA,WAAW,GAAG;AACZ;AADY,SAHdC,UAGc;AAAA,SAFdC,UAEc;AAAA,SADdC,UACc;AAEZ,SAAKD,UAAL,GAAkB,KAAlB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEY,MAATC,SAAS,GAAG;AACd,WAAO,KAAKH,UAAZ;AACD;;AAEc,MAAXI,WAAW,GAAG;AAChB,WAAO,KAAP;AACD;;AAE+B,QAAnBC,mBAAmB,CAC9BC,YAD8B,EAEN;AACxB,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACnB,aAAOD,YAAP;AACD;;AAED,WAAO,KAAKC,SAAL,CAAeF,mBAAf,CAAmCC,YAAnC,CAAP;AACD;;AAEoB,MAATC,SAAS,GAAG;AAAA;;AACtB,gBAAKC,MAAL,wDAAI,KAAiBC,MAArB,gDAAI,YAAyBC,YAA7B,EAA2C;AACzC,aAAQF,MAAD,CAAgBC,MAAvB;AACD;;AACD,WAAOE,SAAP;AACD;;AAEY,MAATC,SAAS,GAAG;AACd,WAAO,KAAKd,UAAL,IAAmBH,kBAA1B;AACD;;AAEoB,QAAfkB,eAAe,CAACC,WAAD,EAA2B;AAC9C,QAAI,CAAC,KAAKP,SAAV,EAAqB;AACnB,aAAOO,WAAP;AACD;;AAED,WAAO,KAAKP,SAAL,CAAeM,eAAf,CAA+BC,WAA/B,CAAP;AACD;;AAEDb,EAAAA,OAAO,GAAG;AACR,QAAI,KAAKF,UAAT,EAAqB;AACnB;AACD;;AAED,QAAI,CAAC,KAAKQ,SAAV,EAAqB;AACnBC,MAAAA,MAAM,CAACO,IAAP,CAAY,yBAAZ,EAAuC,QAAvC;AACArB,MAAAA,MAAM,CAAC;AACLsB,QAAAA,OAAO,EAAE,mBADJ;AAELC,QAAAA,WAAW,EAAE;AAFR,OAAD,CAAN;AAIA;AACD;;AAED,SAAKlB,UAAL,GAAkB,IAAlB;;AACA,SAAKQ,SAAL,CACGW,UADH,GAEGC,IAFH,CAESC,OAAD,IAAkB;AACtB,WAAKtB,UAAL,GAAkB,IAAIL,SAAJ,CAAc2B,OAAd,CAAlB;AACA,WAAKpB,UAAL,GAAkB,IAAlB;AACA,WAAKqB,IAAL,CAAU,SAAV,EAAqB,KAAKvB,UAA1B;AACD,KANH,EAOGwB,KAPH,CAOS,MAAM;AACX,WAAKC,UAAL;AACD,KATH,EAUGC,OAVH,CAUW,MAAM;AACb,WAAKzB,UAAL,GAAkB,KAAlB;AACD,KAZH;AAaD;;AAEDwB,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKzB,UAAT,EAAqB;AACnB,WAAKA,UAAL,GAAkBa,SAAlB;AACA,WAAKX,UAAL,GAAkB,KAAlB;AACA,WAAKqB,IAAL,CAAU,YAAV;AACD;AACF;;AApF0E","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { notify } from '../../utils/notifications';\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from '../types';\n\nexport class MathWalletAdapter extends EventEmitter implements WalletAdapter {\n  _publicKey?: PublicKey;\n  _onProcess: boolean;\n  _connected: boolean;\n  constructor() {\n    super();\n    this._onProcess = false;\n    this._connected = false;\n    this.connect = this.connect.bind(this);\n  }\n\n  get connected() {\n    return this._connected;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  private get _provider() {\n    if ((window as any)?.solana?.isMathWallet) {\n      return (window as any).solana;\n    }\n    return undefined;\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect() {\n    if (this._onProcess) {\n      return;\n    }\n\n    if (!this._provider) {\n      window.open('https://mathwallet.org/', '_blank');\n      notify({\n        message: 'Math Wallet Error',\n        description: 'Please install mathwallet',\n      });\n      return;\n    }\n\n    this._onProcess = true;\n    this._provider\n      .getAccount()\n      .then((account: any) => {\n        this._publicKey = new PublicKey(account);\n        this._connected = true;\n        this.emit('connect', this._publicKey);\n      })\n      .catch(() => {\n        this.disconnect();\n      })\n      .finally(() => {\n        this._onProcess = false;\n      });\n  }\n\n  disconnect() {\n    if (this._publicKey) {\n      this._publicKey = undefined;\n      this._connected = false;\n      this.emit('disconnect');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}