{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deleteNameRegistry = exports.transferNameOwnership = exports.updateNameRegistryData = exports.createNameRegistry = exports.VERIFICATION_AUTHORITY_OFFSET = exports.HASH_PREFIX = exports.NAME_PROGRAM_ID = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst instructions_1 = require(\"./instructions\");\n\nconst state_1 = require(\"./state\");\n\nconst utils_1 = require(\"./utils\");\n\nconst utils_2 = require(\"./utils\"); ////////////////////////////////////////////////////////////\n\n\nexports.NAME_PROGRAM_ID = new web3_js_1.PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\nexports.HASH_PREFIX = 'SPL Name Service';\nexports.VERIFICATION_AUTHORITY_OFFSET = 64; ////////////////////////////////////////////////////////////\n\n/**\n * Creates a name account with the given rent budget, allocated space, owner and class.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the new account\n * @param space The space in bytes allocated to the account\n * @param payerKey The allocation cost payer\n * @param nameOwner The pubkey to be set as owner of the new name account\n * @param lamports The budget to be set for the name account. If not specified, it'll be the minimum for rent exemption\n * @param nameClass The class of this new name\n * @param parentName The parent name of the new name. If specified its owner needs to sign\n * @returns\n */\n\nasync function createNameRegistry(connection, name, space, payerKey, nameOwner, lamports, nameClass, parentName) {\n  const hashed_name = await utils_2.getHashedName(name);\n  const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, parentName);\n  space += 96; // Accounting for the Registry State Header\n\n  const balance = lamports ? lamports : await connection.getMinimumBalanceForRentExemption(space);\n  let nameParentOwner;\n\n  if (parentName) {\n    const parentAccount = await utils_2.getNameOwner(connection, parentName);\n    nameParentOwner = parentAccount.owner;\n  }\n\n  const createNameInstr = instructions_1.createInstruction(exports.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, nameAccountKey, nameOwner, payerKey, hashed_name, new utils_1.Numberu64(balance), new utils_2.Numberu32(space), nameClass, parentName, nameParentOwner);\n  return createNameInstr;\n}\n\nexports.createNameRegistry = createNameRegistry;\n/**\n * Overwrite the data of the given name registry.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name registry to update\n * @param offset The offset to which the data should be written into the registry\n * @param input_data The data to be written\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n */\n\nasync function updateNameRegistryData(connection, name, offset, input_data, nameClass, nameParent) {\n  const hashed_name = await utils_2.getHashedName(name);\n  const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n  let signer;\n\n  if (nameClass) {\n    signer = nameClass;\n  } else {\n    signer = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n  }\n\n  const updateInstr = instructions_1.updateInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, new utils_2.Numberu32(offset), input_data, signer);\n  return updateInstr;\n}\n\nexports.updateNameRegistryData = updateNameRegistryData;\n/**\n * Change the owner of a given name account.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param newOwner The new owner to be set\n * @param curentNameOwner the current name Owner\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\n\nasync function transferNameOwnership(connection, name, newOwner, nameClass, nameParent) {\n  const hashed_name = await utils_2.getHashedName(name);\n  const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n  let curentNameOwner;\n\n  if (nameClass) {\n    curentNameOwner = nameClass;\n  } else {\n    curentNameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n  }\n\n  const transferInstr = instructions_1.transferInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, newOwner, curentNameOwner, nameClass);\n  return transferInstr;\n}\n\nexports.transferNameOwnership = transferNameOwnership;\n/**\n * Delete the name account and transfer the rent to the target.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param refundTargetKey The refund destination address\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\n\nasync function deleteNameRegistry(connection, name, refundTargetKey, nameClass, nameParent) {\n  const hashed_name = await utils_2.getHashedName(name);\n  const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n  let nameOwner;\n\n  if (nameClass) {\n    nameOwner = nameClass;\n  } else {\n    nameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n  }\n\n  const changeAuthoritiesInstr = instructions_1.deleteInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, refundTargetKey, nameOwner);\n  return changeAuthoritiesInstr;\n}\n\nexports.deleteNameRegistry = deleteNameRegistry;","map":{"version":3,"sources":["../src/bindings.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deleteNameRegistry = exports.transferNameOwnership = exports.updateNameRegistryData = exports.createNameRegistry = exports.VERIFICATION_AUTHORITY_OFFSET = exports.HASH_PREFIX = exports.NAME_PROGRAM_ID = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst instructions_1 = require(\"./instructions\");\nconst state_1 = require(\"./state\");\nconst utils_1 = require(\"./utils\");\nconst utils_2 = require(\"./utils\");\n////////////////////////////////////////////////////////////\nexports.NAME_PROGRAM_ID = new web3_js_1.PublicKey('namesLPneVptA9Z5rqUDD9tMTWEJwofgaYwp8cawRkX');\nexports.HASH_PREFIX = 'SPL Name Service';\nexports.VERIFICATION_AUTHORITY_OFFSET = 64;\n////////////////////////////////////////////////////////////\n/**\n * Creates a name account with the given rent budget, allocated space, owner and class.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the new account\n * @param space The space in bytes allocated to the account\n * @param payerKey The allocation cost payer\n * @param nameOwner The pubkey to be set as owner of the new name account\n * @param lamports The budget to be set for the name account. If not specified, it'll be the minimum for rent exemption\n * @param nameClass The class of this new name\n * @param parentName The parent name of the new name. If specified its owner needs to sign\n * @returns\n */\nasync function createNameRegistry(connection, name, space, payerKey, nameOwner, lamports, nameClass, parentName) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, parentName);\n    space += 96; // Accounting for the Registry State Header\n    const balance = lamports\n        ? lamports\n        : await connection.getMinimumBalanceForRentExemption(space);\n    let nameParentOwner;\n    if (parentName) {\n        const parentAccount = await utils_2.getNameOwner(connection, parentName);\n        nameParentOwner = parentAccount.owner;\n    }\n    const createNameInstr = instructions_1.createInstruction(exports.NAME_PROGRAM_ID, web3_js_1.SystemProgram.programId, nameAccountKey, nameOwner, payerKey, hashed_name, new utils_1.Numberu64(balance), new utils_2.Numberu32(space), nameClass, parentName, nameParentOwner);\n    return createNameInstr;\n}\nexports.createNameRegistry = createNameRegistry;\n/**\n * Overwrite the data of the given name registry.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name registry to update\n * @param offset The offset to which the data should be written into the registry\n * @param input_data The data to be written\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n */\nasync function updateNameRegistryData(connection, name, offset, input_data, nameClass, nameParent) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n    let signer;\n    if (nameClass) {\n        signer = nameClass;\n    }\n    else {\n        signer = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey))\n            .owner;\n    }\n    const updateInstr = instructions_1.updateInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, new utils_2.Numberu32(offset), input_data, signer);\n    return updateInstr;\n}\nexports.updateNameRegistryData = updateNameRegistryData;\n/**\n * Change the owner of a given name account.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param newOwner The new owner to be set\n * @param curentNameOwner the current name Owner\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\nasync function transferNameOwnership(connection, name, newOwner, nameClass, nameParent) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n    let curentNameOwner;\n    if (nameClass) {\n        curentNameOwner = nameClass;\n    }\n    else {\n        curentNameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey)).owner;\n    }\n    const transferInstr = instructions_1.transferInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, newOwner, curentNameOwner, nameClass);\n    return transferInstr;\n}\nexports.transferNameOwnership = transferNameOwnership;\n/**\n * Delete the name account and transfer the rent to the target.\n *\n * @param connection The solana connection object to the RPC node\n * @param name The name of the name account\n * @param refundTargetKey The refund destination address\n * @param nameClass The class of this name, if it exsists\n * @param nameParent The parent name of this name, if it exists\n * @returns\n */\nasync function deleteNameRegistry(connection, name, refundTargetKey, nameClass, nameParent) {\n    const hashed_name = await utils_2.getHashedName(name);\n    const nameAccountKey = await utils_2.getNameAccountKey(hashed_name, nameClass, nameParent);\n    let nameOwner;\n    if (nameClass) {\n        nameOwner = nameClass;\n    }\n    else {\n        nameOwner = (await state_1.NameRegistryState.retrieve(connection, nameAccountKey))\n            .owner;\n    }\n    const changeAuthoritiesInstr = instructions_1.deleteInstruction(exports.NAME_PROGRAM_ID, nameAccountKey, refundTargetKey, nameOwner);\n    return changeAuthoritiesInstr;\n}\nexports.deleteNameRegistry = deleteNameRegistry;\n//# sourceMappingURL=bindings.js.map"]},"metadata":{},"sourceType":"script"}