{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PoolInstructions = exports.LQD_FEE_OWNER_ADDRESS = exports.RETBUF_PROGRAM_ID = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst schema_1 = require(\"./schema\");\n\nconst token_instructions_1 = require(\"@project-serum/serum/lib/token-instructions\");\n\nexports.RETBUF_PROGRAM_ID = new web3_js_1.PublicKey( // TODO: switch to shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL once that exists on mainnet\n'BYVBQ71CYArTNbEpDnsPCjcoWkJL9181xvj52kfyFFHg');\nexports.LQD_FEE_OWNER_ADDRESS = new web3_js_1.PublicKey('3LTvJCPiPSMjX1kBJ6ZfEhn4G2hM46aJ1yEZsk8i12TK');\n/**\n * Low-level API for constructing and encoding pool instructions.\n *\n * For a higher-level API that handles initializing accounts and approving token\n * transfers, use {@link PoolTransactions}.\n */\n\nclass PoolInstructions {\n  /**\n   * Instruction to initialize a pool.\n   *\n   * @param poolProgram Program ID of the pool program.\n   * @param poolAccount Newly-created account to hold the pool state. Must be\n   * owned by the pool program.\n   * @param poolTokenMint spl-token mint address for the pool token.\n   * @param poolName User-friendly name for the pool.\n   * @param vaults spl-token account for each of the assets in the pool.\n   * @param vaultSigner Mint authority for `poolTokenMint` and owner of\n   * `poolTokenMint`.\n   * @param vaultSignerNonce Nonce used to generate `vaultSigner`.\n   * @param lqdFeeAccount Pool token spl-token account owned by the LQD fee owner.\n   * @param initializerFeeAccount Pool token spl-token account owned by the pool initializer.\n   * @param feeRate Fee rate for creations/redemptions times 10^6.\n   * @param additionalAccounts Any custom pool-specific accounts needed to\n   * initialize the pool.\n   * @param customData Any custom pool-specific data needed to initialize the pool\n   */\n  static initialize(poolProgram, poolAccount, poolTokenMint, poolName, vaults, vaultSigner, vaultSignerNonce, lqdFeeAccount, initializerFeeAccount, feeRate, additionalAccounts, customData) {\n    return new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: poolAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: poolTokenMint,\n        isSigner: false,\n        isWritable: true\n      }, ...vaults.map(vaultAddress => ({\n        pubkey: vaultAddress,\n        isSigner: false,\n        isWritable: true\n      })), {\n        pubkey: vaultSigner,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: lqdFeeAccount,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: initializerFeeAccount,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, ...(additionalAccounts !== null && additionalAccounts !== void 0 ? additionalAccounts : [])],\n      programId: poolProgram,\n      data: schema_1.encodePoolRequest({\n        initialize: {\n          vaultSignerNonce,\n          assetsLength: vaults.length,\n          poolName,\n          feeRate,\n          customData: customData !== null && customData !== void 0 ? customData : Buffer.alloc(0)\n        }\n      })\n    });\n  }\n  /**\n   * Instruction to get the expected basket for a {@link PoolAction}.\n   *\n   * For creations, the basket is the quantity of each asset\n   * that need to be sent to the pool to process the creation.  For redemptions\n   * and swaps, the basket is the quantity of each asset that will be\n   * transferred from the pool to the user after the redemption or swap.\n   *\n   * Negative quantities will cause tokens to be transferred in the opposite\n   * direction.\n   *\n   * @param pool\n   * @param action Creation, redemption, or swap.\n   * @param retbufAccount Account to which the basket will be written. Must be\n   * owned by the retbuf program.\n   */\n\n\n  static getBasket(pool, action, retbufAccount) {\n    return new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: pool.address,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: pool.state.poolTokenMint,\n        isSigner: false,\n        isWritable: false\n      }, ...pool.state.assets.map(assetInfo => ({\n        pubkey: assetInfo.vaultAddress,\n        isSigner: false,\n        isWritable: false\n      })), {\n        pubkey: pool.state.vaultSigner,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: retbufAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: exports.RETBUF_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, ...pool.state.accountParams.map(paramInfo => ({\n        pubkey: paramInfo.address,\n        isSigner: false,\n        isWritable: false\n      }))],\n      programId: pool.program,\n      data: schema_1.encodePoolRequest({\n        getBasket: action\n      })\n    });\n  }\n  /**\n   * Instruction to execute a creation, redemption, or swap.\n   *\n   * @param pool\n   * @param action Creation, redemption, or swap.\n   * @param user Token accounts to pull funds from or send funds to.\n   */\n\n\n  static execute(pool, action, user) {\n    var _a;\n\n    return new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: pool.address,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: pool.state.poolTokenMint,\n        isSigner: false,\n        isWritable: true\n      }, ...pool.state.assets.map(assetInfo => ({\n        pubkey: assetInfo.vaultAddress,\n        isSigner: false,\n        isWritable: true\n      })), {\n        pubkey: pool.state.vaultSigner,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: user.poolTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, ...user.assetAccounts.map(address => ({\n        pubkey: address,\n        isSigner: false,\n        isWritable: true\n      })), {\n        pubkey: user.owner,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: pool.state.lqdFeeVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: pool.state.initializerFeeVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: (_a = user.referrer) !== null && _a !== void 0 ? _a : pool.state.lqdFeeVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, ...pool.state.accountParams.map(paramInfo => ({\n        pubkey: paramInfo.address,\n        isSigner: false,\n        isWritable: paramInfo.writable\n      }))],\n      programId: pool.program,\n      data: schema_1.encodePoolRequest({\n        execute: action\n      })\n    });\n  }\n\n}\n\nexports.PoolInstructions = PoolInstructions;","map":{"version":3,"sources":["../../src/instructions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PoolInstructions = exports.LQD_FEE_OWNER_ADDRESS = exports.RETBUF_PROGRAM_ID = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst schema_1 = require(\"./schema\");\nconst token_instructions_1 = require(\"@project-serum/serum/lib/token-instructions\");\nexports.RETBUF_PROGRAM_ID = new web3_js_1.PublicKey(\n// TODO: switch to shmem4EWT2sPdVGvTZCzXXRAURL9G5vpPxNwSeKhHUL once that exists on mainnet\n'BYVBQ71CYArTNbEpDnsPCjcoWkJL9181xvj52kfyFFHg');\nexports.LQD_FEE_OWNER_ADDRESS = new web3_js_1.PublicKey('3LTvJCPiPSMjX1kBJ6ZfEhn4G2hM46aJ1yEZsk8i12TK');\n/**\n * Low-level API for constructing and encoding pool instructions.\n *\n * For a higher-level API that handles initializing accounts and approving token\n * transfers, use {@link PoolTransactions}.\n */\nclass PoolInstructions {\n    /**\n     * Instruction to initialize a pool.\n     *\n     * @param poolProgram Program ID of the pool program.\n     * @param poolAccount Newly-created account to hold the pool state. Must be\n     * owned by the pool program.\n     * @param poolTokenMint spl-token mint address for the pool token.\n     * @param poolName User-friendly name for the pool.\n     * @param vaults spl-token account for each of the assets in the pool.\n     * @param vaultSigner Mint authority for `poolTokenMint` and owner of\n     * `poolTokenMint`.\n     * @param vaultSignerNonce Nonce used to generate `vaultSigner`.\n     * @param lqdFeeAccount Pool token spl-token account owned by the LQD fee owner.\n     * @param initializerFeeAccount Pool token spl-token account owned by the pool initializer.\n     * @param feeRate Fee rate for creations/redemptions times 10^6.\n     * @param additionalAccounts Any custom pool-specific accounts needed to\n     * initialize the pool.\n     * @param customData Any custom pool-specific data needed to initialize the pool\n     */\n    static initialize(poolProgram, poolAccount, poolTokenMint, poolName, vaults, vaultSigner, vaultSignerNonce, lqdFeeAccount, initializerFeeAccount, feeRate, additionalAccounts, customData) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: poolAccount, isSigner: false, isWritable: true },\n                { pubkey: poolTokenMint, isSigner: false, isWritable: true },\n                ...vaults.map(vaultAddress => ({\n                    pubkey: vaultAddress,\n                    isSigner: false,\n                    isWritable: true,\n                })),\n                { pubkey: vaultSigner, isSigner: false, isWritable: false },\n                { pubkey: lqdFeeAccount, isSigner: false, isWritable: false },\n                { pubkey: initializerFeeAccount, isSigner: false, isWritable: false },\n                {\n                    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                ...(additionalAccounts !== null && additionalAccounts !== void 0 ? additionalAccounts : []),\n            ],\n            programId: poolProgram,\n            data: schema_1.encodePoolRequest({\n                initialize: {\n                    vaultSignerNonce,\n                    assetsLength: vaults.length,\n                    poolName,\n                    feeRate,\n                    customData: customData !== null && customData !== void 0 ? customData : Buffer.alloc(0),\n                },\n            }),\n        });\n    }\n    /**\n     * Instruction to get the expected basket for a {@link PoolAction}.\n     *\n     * For creations, the basket is the quantity of each asset\n     * that need to be sent to the pool to process the creation.  For redemptions\n     * and swaps, the basket is the quantity of each asset that will be\n     * transferred from the pool to the user after the redemption or swap.\n     *\n     * Negative quantities will cause tokens to be transferred in the opposite\n     * direction.\n     *\n     * @param pool\n     * @param action Creation, redemption, or swap.\n     * @param retbufAccount Account to which the basket will be written. Must be\n     * owned by the retbuf program.\n     */\n    static getBasket(pool, action, retbufAccount) {\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: pool.address, isSigner: false, isWritable: false },\n                {\n                    pubkey: pool.state.poolTokenMint,\n                    isSigner: false,\n                    isWritable: false,\n                },\n                ...pool.state.assets.map(assetInfo => ({\n                    pubkey: assetInfo.vaultAddress,\n                    isSigner: false,\n                    isWritable: false,\n                })),\n                { pubkey: pool.state.vaultSigner, isSigner: false, isWritable: false },\n                { pubkey: retbufAccount, isSigner: false, isWritable: true },\n                { pubkey: exports.RETBUF_PROGRAM_ID, isSigner: false, isWritable: false },\n                ...pool.state.accountParams.map(paramInfo => ({\n                    pubkey: paramInfo.address,\n                    isSigner: false,\n                    isWritable: false,\n                })),\n            ],\n            programId: pool.program,\n            data: schema_1.encodePoolRequest({ getBasket: action }),\n        });\n    }\n    /**\n     * Instruction to execute a creation, redemption, or swap.\n     *\n     * @param pool\n     * @param action Creation, redemption, or swap.\n     * @param user Token accounts to pull funds from or send funds to.\n     */\n    static execute(pool, action, user) {\n        var _a;\n        return new web3_js_1.TransactionInstruction({\n            keys: [\n                { pubkey: pool.address, isSigner: false, isWritable: true },\n                { pubkey: pool.state.poolTokenMint, isSigner: false, isWritable: true },\n                ...pool.state.assets.map(assetInfo => ({\n                    pubkey: assetInfo.vaultAddress,\n                    isSigner: false,\n                    isWritable: true,\n                })),\n                { pubkey: pool.state.vaultSigner, isSigner: false, isWritable: false },\n                { pubkey: user.poolTokenAccount, isSigner: false, isWritable: true },\n                ...user.assetAccounts.map(address => ({\n                    pubkey: address,\n                    isSigner: false,\n                    isWritable: true,\n                })),\n                { pubkey: user.owner, isSigner: true, isWritable: false },\n                {\n                    pubkey: pool.state.lqdFeeVault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: pool.state.initializerFeeVault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                {\n                    pubkey: (_a = user.referrer) !== null && _a !== void 0 ? _a : pool.state.lqdFeeVault,\n                    isSigner: false,\n                    isWritable: true,\n                },\n                { pubkey: token_instructions_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n                ...pool.state.accountParams.map(paramInfo => ({\n                    pubkey: paramInfo.address,\n                    isSigner: false,\n                    isWritable: paramInfo.writable,\n                })),\n            ],\n            programId: pool.program,\n            data: schema_1.encodePoolRequest({ execute: action }),\n        });\n    }\n}\nexports.PoolInstructions = PoolInstructions;\n//# sourceMappingURL=instructions.js.map"]},"metadata":{},"sourceType":"script"}