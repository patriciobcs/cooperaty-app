{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/pools/PoolPage/PoolBalancesPanel.tsx\";\nimport React from 'react';\nimport { useAccountInfo } from '../../../utils/connection';\nimport { parseTokenAccountData, parseTokenMintData } from '../../../utils/tokens';\nimport { Button, Spin, Tabs } from 'antd';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useTokenAccounts } from '../../../utils/markets';\nimport { MintName } from '../../../components/MintName';\nimport { LinkOutlined } from '@ant-design/icons';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\nconst {\n  TabPane\n} = Tabs;\nexport default function PoolBalancesPanel({\n  poolInfo\n}) {\n  return /*#__PURE__*/React.createElement(FloatingElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Wallet Balances\",\n    key: \"wallet\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WalletBalancesTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(TabPane, {\n    tab: \"Pool Balances\",\n    key: \"pool\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PoolBalancesTab, {\n    poolInfo: poolInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }))));\n}\n\nfunction WalletBalancesTab({\n  poolInfo\n}) {\n  const [tokenAccounts] = useTokenAccounts();\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, [poolInfo.state.poolTokenMint, ...poolInfo.state.assets.map(asset => asset.mint)].map((mint, index) => {\n    const tokenAccount = tokenAccounts === null || tokenAccounts === void 0 ? void 0 : tokenAccounts.find(account => account.effectiveMint.equals(mint));\n\n    if (!tokenAccount) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(BalanceItem, {\n      key: index,\n      mint: mint,\n      publicKey: tokenAccount.pubkey,\n      isPoolToken: mint.equals(poolInfo.state.poolTokenMint),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    });\n  }));\n}\n\nfunction PoolBalancesTab({\n  poolInfo\n}) {\n  return /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, poolInfo.state.assets.map((asset, index) => {\n    return /*#__PURE__*/React.createElement(BalanceItem, {\n      key: index,\n      mint: asset.mint,\n      publicKey: asset.vaultAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    });\n  }));\n}\n\nfunction BalanceItem({\n  mint,\n  publicKey,\n  isPoolToken\n}) {\n  const [mintAccountInfo] = useAccountInfo(mint);\n  const [balanceAccountInfo] = useAccountInfo(publicKey);\n  let quantityDisplay = /*#__PURE__*/React.createElement(Spin, {\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 25\n    }\n  });\n\n  if (mintAccountInfo && balanceAccountInfo) {\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\n\n    if (mint.equals(WRAPPED_SOL_MINT)) {\n      quantityDisplay = /*#__PURE__*/React.createElement(React.Fragment, null, balanceAccountInfo.lamports / 10 ** mintInfo.decimals);\n    } else {\n      const accountInfo = parseTokenAccountData(balanceAccountInfo.data);\n      quantityDisplay = /*#__PURE__*/React.createElement(React.Fragment, null, accountInfo.amount / 10 ** mintInfo.decimals);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, quantityDisplay, ' ', isPoolToken ? /*#__PURE__*/React.createElement(React.Fragment, null, \"Pool Token (\", /*#__PURE__*/React.createElement(MintName, {\n    mint: mint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 23\n    }\n  }), \")\") : /*#__PURE__*/React.createElement(MintName, {\n    mint: mint,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }), ' ', /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    icon: /*#__PURE__*/React.createElement(LinkOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }),\n    href: 'https://solscan.io/address/' + publicKey.toBase58(),\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/pools/PoolPage/PoolBalancesPanel.tsx"],"names":["React","useAccountInfo","parseTokenAccountData","parseTokenMintData","Button","Spin","Tabs","FloatingElement","useTokenAccounts","MintName","LinkOutlined","WRAPPED_SOL_MINT","TabPane","PoolBalancesPanel","poolInfo","WalletBalancesTab","tokenAccounts","state","poolTokenMint","assets","map","asset","mint","index","tokenAccount","find","account","effectiveMint","equals","pubkey","PoolBalancesTab","vaultAddress","BalanceItem","publicKey","isPoolToken","mintAccountInfo","balanceAccountInfo","quantityDisplay","mintInfo","data","lamports","decimals","accountInfo","amount","toBase58"],"mappings":"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","sourcesContent":["import { PoolInfo } from '@project-serum/pool';\nimport React from 'react';\nimport { PublicKey } from '@solana/web3.js';\nimport { useAccountInfo } from '../../../utils/connection';\nimport {\n  parseTokenAccountData,\n  parseTokenMintData,\n} from '../../../utils/tokens';\nimport { Button, Spin, Tabs } from 'antd';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { useTokenAccounts } from '../../../utils/markets';\nimport { MintName } from '../../../components/MintName';\nimport { LinkOutlined } from '@ant-design/icons';\nimport { WRAPPED_SOL_MINT } from '@project-serum/serum/lib/token-instructions';\n\nconst { TabPane } = Tabs;\n\nexport default function PoolBalancesPanel({\n  poolInfo,\n}: {\n  poolInfo: PoolInfo;\n}) {\n  return (\n    <FloatingElement>\n      <Tabs>\n        <TabPane tab=\"Wallet Balances\" key=\"wallet\">\n          <WalletBalancesTab poolInfo={poolInfo} />\n        </TabPane>\n        <TabPane tab=\"Pool Balances\" key=\"pool\">\n          <PoolBalancesTab poolInfo={poolInfo} />\n        </TabPane>\n      </Tabs>\n    </FloatingElement>\n  );\n}\n\nfunction WalletBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\n  const [tokenAccounts] = useTokenAccounts();\n  return (\n    <ul>\n      {[\n        poolInfo.state.poolTokenMint,\n        ...poolInfo.state.assets.map((asset) => asset.mint),\n      ].map((mint, index) => {\n        const tokenAccount = tokenAccounts?.find((account) =>\n          account.effectiveMint.equals(mint),\n        );\n        if (!tokenAccount) {\n          return null;\n        }\n        return (\n          <BalanceItem\n            key={index}\n            mint={mint}\n            publicKey={tokenAccount.pubkey}\n            isPoolToken={mint.equals(poolInfo.state.poolTokenMint)}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\nfunction PoolBalancesTab({ poolInfo }: { poolInfo: PoolInfo }) {\n  return (\n    <ul>\n      {poolInfo.state.assets.map((asset, index) => {\n        return (\n          <BalanceItem\n            key={index}\n            mint={asset.mint}\n            publicKey={asset.vaultAddress}\n          />\n        );\n      })}\n    </ul>\n  );\n}\n\ninterface BalanceItemProps {\n  mint: PublicKey;\n  publicKey: PublicKey;\n  isPoolToken?: boolean;\n}\n\nfunction BalanceItem({ mint, publicKey, isPoolToken }: BalanceItemProps) {\n  const [mintAccountInfo] = useAccountInfo(mint);\n  const [balanceAccountInfo] = useAccountInfo(publicKey);\n  let quantityDisplay = <Spin size=\"small\" />;\n  if (mintAccountInfo && balanceAccountInfo) {\n    const mintInfo = parseTokenMintData(mintAccountInfo.data);\n    if (mint.equals(WRAPPED_SOL_MINT)) {\n      quantityDisplay = (\n        <>{balanceAccountInfo.lamports / 10 ** mintInfo.decimals}</>\n      );\n    } else {\n      const accountInfo = parseTokenAccountData(balanceAccountInfo.data);\n      quantityDisplay = <>{accountInfo.amount / 10 ** mintInfo.decimals}</>;\n    }\n  }\n\n  return (\n    <li>\n      {quantityDisplay}{' '}\n      {isPoolToken ? (\n        <>\n          Pool Token (<MintName mint={mint} />)\n        </>\n      ) : (\n        <MintName mint={mint} />\n      )}{' '}\n      <Button\n        type=\"link\"\n        icon={<LinkOutlined />}\n        href={'https://solscan.io/address/' + publicKey.toBase58()}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      />\n    </li>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}