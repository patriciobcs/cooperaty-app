{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NameRegistryState = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nclass NameRegistryState {\n  constructor(obj) {\n    this.parentName = new web3_js_1.PublicKey(obj.parentName);\n    this.owner = new web3_js_1.PublicKey(obj.owner);\n    this.class = new web3_js_1.PublicKey(obj.class);\n    this.data = Buffer.from(obj.data);\n  }\n\n  static deserialize(buffer) {\n    return new NameRegistryState({\n      parentName: buffer.slice(0, 32),\n      owner: buffer.slice(32, 64),\n      class: buffer.slice(64, 96),\n      data: buffer.slice(96, buffer.length)\n    });\n  }\n\n  static async retrieve(connection, nameAccountKey) {\n    const nameAccount = await connection.getAccountInfo(nameAccountKey, 'processed');\n\n    if (!nameAccount) {\n      throw new Error('Invalid name account provided');\n    }\n\n    const res = NameRegistryState.deserialize(nameAccount.data);\n    return res;\n  }\n\n}\n\nexports.NameRegistryState = NameRegistryState;","map":{"version":3,"sources":["../src/state.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAEA,MAAa,iBAAb,CAA8B;AAM5B,EAAA,WAAA,CAAY,GAAZ,EAKC;AACC,SAAK,UAAL,GAAkB,IAAI,SAAA,CAAA,SAAJ,CAAc,GAAG,CAAC,UAAlB,CAAlB;AACA,SAAK,KAAL,GAAa,IAAI,SAAA,CAAA,SAAJ,CAAc,GAAG,CAAC,KAAlB,CAAb;AACA,SAAK,KAAL,GAAa,IAAI,SAAA,CAAA,SAAJ,CAAc,GAAG,CAAC,KAAlB,CAAb;AACA,SAAK,IAAL,GAAY,MAAM,CAAC,IAAP,CAAY,GAAG,CAAC,IAAhB,CAAZ;AACD;;AAEiB,SAAX,WAAW,CAAC,MAAD,EAAe;AAC/B,WAAO,IAAI,iBAAJ,CAAsB;AAC3B,MAAA,UAAU,EAAE,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,EAAhB,CADe;AAE3B,MAAA,KAAK,EAAE,MAAM,CAAC,KAAP,CAAa,EAAb,EAAiB,EAAjB,CAFoB;AAG3B,MAAA,KAAK,EAAE,MAAM,CAAC,KAAP,CAAa,EAAb,EAAiB,EAAjB,CAHoB;AAI3B,MAAA,IAAI,EAAE,MAAM,CAAC,KAAP,CAAa,EAAb,EAAiB,MAAM,CAAC,MAAxB;AAJqB,KAAtB,CAAP;AAMD;;AAEoB,eAAR,QAAQ,CACnB,UADmB,EAEnB,cAFmB,EAEM;AAEzB,UAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAX,CACxB,cADwB,EAExB,WAFwB,CAA1B;;AAIA,QAAI,CAAC,WAAL,EAAkB;AAChB,YAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,UAAM,GAAG,GAAsB,iBAAiB,CAAC,WAAlB,CAC7B,WAAW,CAAC,IADiB,CAA/B;AAGA,WAAO,GAAP;AACD;;AA3C2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NameRegistryState = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nclass NameRegistryState {\n    constructor(obj) {\n        this.parentName = new web3_js_1.PublicKey(obj.parentName);\n        this.owner = new web3_js_1.PublicKey(obj.owner);\n        this.class = new web3_js_1.PublicKey(obj.class);\n        this.data = Buffer.from(obj.data);\n    }\n    static deserialize(buffer) {\n        return new NameRegistryState({\n            parentName: buffer.slice(0, 32),\n            owner: buffer.slice(32, 64),\n            class: buffer.slice(64, 96),\n            data: buffer.slice(96, buffer.length),\n        });\n    }\n    static async retrieve(connection, nameAccountKey) {\n        const nameAccount = await connection.getAccountInfo(nameAccountKey, 'processed');\n        if (!nameAccount) {\n            throw new Error('Invalid name account provided');\n        }\n        const res = NameRegistryState.deserialize(nameAccount.data);\n        return res;\n    }\n}\nexports.NameRegistryState = NameRegistryState;\n//# sourceMappingURL=state.js.map"]},"metadata":{},"sourceType":"script"}