{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport { notify } from '../../utils/notifications';\nimport { getPublicKey, signTransaction } from './core';\nimport { DEFAULT_PUBLIC_KEY } from '../types';\nexport class LedgerWalletAdapter extends EventEmitter {\n  constructor() {\n    super();\n    this._connecting = void 0;\n    this._publicKey = void 0;\n    this._transport = void 0;\n    this._connecting = false;\n    this._publicKey = null;\n    this._transport = null;\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  async signAllTransactions(transactions) {\n    const result = [];\n\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = transactions[i];\n      const signed = await this.signTransaction(transaction);\n      result.push(signed);\n    }\n\n    return result;\n  }\n\n  async signTransaction(transaction) {\n    if (!this._transport || !this._publicKey) {\n      throw new Error('Not connected to Ledger');\n    } // @TODO: account selection (derivation path changes with account)\n\n\n    const signature = await signTransaction(this._transport, transaction);\n    transaction.addSignature(this._publicKey, signature);\n    return transaction;\n  }\n\n  async connect() {\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n\n    try {\n      // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)\n      this._transport = await TransportWebUSB.create(); // @TODO: account selection\n\n      this._publicKey = await getPublicKey(this._transport);\n      this.emit('connect', this._publicKey);\n    } catch (error) {\n      notify({\n        message: 'Ledger Error',\n        description: error.message\n      });\n      await this.disconnect();\n    } finally {\n      this._connecting = false;\n    }\n  }\n\n  async disconnect() {\n    let emit = false;\n\n    if (this._transport) {\n      await this._transport.close();\n      this._transport = null;\n      emit = true;\n    }\n\n    this._connecting = false;\n    this._publicKey = null;\n\n    if (emit) {\n      this.emit('disconnect');\n    }\n  }\n\n}","map":{"version":3,"sources":["D:/Archivos/Escritorio/serum-dex-ui/src/wallet-adapters/ledger/index.tsx"],"names":["EventEmitter","TransportWebUSB","notify","getPublicKey","signTransaction","DEFAULT_PUBLIC_KEY","LedgerWalletAdapter","constructor","_connecting","_publicKey","_transport","publicKey","connected","autoApprove","signAllTransactions","transactions","result","i","length","transaction","signed","push","Error","signature","addSignature","connect","create","emit","error","message","description","disconnect","close"],"mappings":"AAGA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,OAAOC,eAAP,MAA4B,+BAA5B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,YAAT,EAAuBC,eAAvB,QAA8C,QAA9C;AACA,SAASC,kBAAT,QAAkD,UAAlD;AAEA,OAAO,MAAMC,mBAAN,SAAkCN,YAAlC,CAAwE;AAK7EO,EAAAA,WAAW,GAAG;AACZ;AADY,SAJdC,WAIc;AAAA,SAHdC,UAGc;AAAA,SAFdC,UAEc;AAEZ,SAAKF,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACD;;AAEY,MAATC,SAAS,GAAG;AACd,WAAO,KAAKF,UAAL,IAAmBJ,kBAA1B;AACD;;AAEY,MAATO,SAAS,GAAG;AACd,WAAO,KAAKH,UAAL,KAAoB,IAA3B;AACD;;AAEc,MAAXI,WAAW,GAAG;AAChB,WAAO,KAAP;AACD;;AAE+B,QAAnBC,mBAAmB,CAC9BC,YAD8B,EAEN;AACxB,UAAMC,MAAqB,GAAG,EAA9B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAAY,CAACG,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAME,WAAW,GAAGJ,YAAY,CAACE,CAAD,CAAhC;AACA,YAAMG,MAAM,GAAG,MAAM,KAAKhB,eAAL,CAAqBe,WAArB,CAArB;AACAH,MAAAA,MAAM,CAACK,IAAP,CAAYD,MAAZ;AACD;;AAED,WAAOJ,MAAP;AACD;;AAEoB,QAAfZ,eAAe,CAACe,WAAD,EAA2B;AAC9C,QAAI,CAAC,KAAKT,UAAN,IAAoB,CAAC,KAAKD,UAA9B,EAA0C;AACxC,YAAM,IAAIa,KAAJ,CAAU,yBAAV,CAAN;AACD,KAH6C,CAK9C;;;AACA,UAAMC,SAAS,GAAG,MAAMnB,eAAe,CAAC,KAAKM,UAAN,EAAkBS,WAAlB,CAAvC;AAEAA,IAAAA,WAAW,CAACK,YAAZ,CAAyB,KAAKf,UAA9B,EAA0Cc,SAA1C;AAEA,WAAOJ,WAAP;AACD;;AAEY,QAAPM,OAAO,GAAG;AACd,QAAI,KAAKjB,WAAT,EAAsB;AACpB;AACD;;AAED,SAAKA,WAAL,GAAmB,IAAnB;;AAEA,QAAI;AACF;AACA,WAAKE,UAAL,GAAkB,MAAMT,eAAe,CAACyB,MAAhB,EAAxB,CAFE,CAGF;;AACA,WAAKjB,UAAL,GAAkB,MAAMN,YAAY,CAAC,KAAKO,UAAN,CAApC;AACA,WAAKiB,IAAL,CAAU,SAAV,EAAqB,KAAKlB,UAA1B;AACD,KAND,CAME,OAAOmB,KAAP,EAAc;AACd1B,MAAAA,MAAM,CAAC;AACL2B,QAAAA,OAAO,EAAE,cADJ;AAELC,QAAAA,WAAW,EAAEF,KAAK,CAACC;AAFd,OAAD,CAAN;AAIA,YAAM,KAAKE,UAAL,EAAN;AACD,KAZD,SAYU;AACR,WAAKvB,WAAL,GAAmB,KAAnB;AACD;AACF;;AAEe,QAAVuB,UAAU,GAAG;AACjB,QAAIJ,IAAI,GAAG,KAAX;;AACA,QAAI,KAAKjB,UAAT,EAAqB;AACnB,YAAM,KAAKA,UAAL,CAAgBsB,KAAhB,EAAN;AACA,WAAKtB,UAAL,GAAkB,IAAlB;AACAiB,MAAAA,IAAI,GAAG,IAAP;AACD;;AAED,SAAKnB,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL,GAAkB,IAAlB;;AAEA,QAAIkB,IAAJ,EAAU;AACR,WAAKA,IAAL,CAAU,YAAV;AACD;AACF;;AAxF4E","sourcesContent":["import type Transport from '@ledgerhq/hw-transport';\nimport type { Transaction } from '@solana/web3.js';\n\nimport EventEmitter from 'eventemitter3';\nimport { PublicKey } from '@solana/web3.js';\nimport TransportWebUSB from '@ledgerhq/hw-transport-webusb';\nimport { notify } from '../../utils/notifications';\nimport { getPublicKey, signTransaction } from './core';\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from '../types';\n\nexport class LedgerWalletAdapter extends EventEmitter implements WalletAdapter {\n  _connecting: boolean;\n  _publicKey: PublicKey | null;\n  _transport: Transport | null;\n\n  constructor() {\n    super();\n    this._connecting = false;\n    this._publicKey = null;\n    this._transport = null;\n  }\n\n  get publicKey() {\n    return this._publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  get connected() {\n    return this._publicKey !== null;\n  }\n\n  get autoApprove() {\n    return false;\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    const result: Transaction[] = [];\n    for (let i = 0; i < transactions.length; i++) {\n      const transaction = transactions[i];\n      const signed = await this.signTransaction(transaction);\n      result.push(signed);\n    }\n\n    return result;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._transport || !this._publicKey) {\n      throw new Error('Not connected to Ledger');\n    }\n\n    // @TODO: account selection (derivation path changes with account)\n    const signature = await signTransaction(this._transport, transaction);\n\n    transaction.addSignature(this._publicKey, signature);\n\n    return transaction;\n  }\n\n  async connect() {\n    if (this._connecting) {\n      return;\n    }\n\n    this._connecting = true;\n\n    try {\n      // @TODO: transport selection (WebUSB, WebHID, bluetooth, ...)\n      this._transport = await TransportWebUSB.create();\n      // @TODO: account selection\n      this._publicKey = await getPublicKey(this._transport);\n      this.emit('connect', this._publicKey);\n    } catch (error) {\n      notify({\n        message: 'Ledger Error',\n        description: error.message,\n      });\n      await this.disconnect();\n    } finally {\n      this._connecting = false;\n    }\n  }\n\n  async disconnect() {\n    let emit = false;\n    if (this._transport) {\n      await this._transport.close();\n      this._transport = null;\n      emit = true;\n    }\n\n    this._connecting = false;\n    this._publicKey = null;\n\n    if (emit) {\n      this.emit('disconnect');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}