{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/ListNewMarketPage.jsx\";\nimport React, { useState } from 'react';\nimport { Button, Form, Input, Tooltip, Typography } from 'antd';\nimport { notify } from '../utils/notifications';\nimport { MARKETS } from '@project-serum/serum';\nimport { useConnection } from '../utils/connection';\nimport FloatingElement from '../components/layout/FloatingElement';\nimport styled from 'styled-components';\nimport { useWallet } from '../utils/wallet';\nimport { listMarket } from '../utils/send';\nimport { useMintInput } from '../components/useMintInput';\nconst {\n  Text,\n  Title\n} = Typography;\nconst Wrapper = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\nexport default function ListNewMarketPage() {\n  const connection = useConnection();\n  const {\n    wallet,\n    connected\n  } = useWallet();\n  const [baseMintInput, baseMintInfo] = useMintInput('baseMint', /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, \"Base Token Mint Address\", ' ', /*#__PURE__*/React.createElement(Text, {\n    type: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  }, \"(e.g. BTC solana address:\", ' ', /*#__PURE__*/React.createElement(Text, {\n    type: \"secondary\",\n    code: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, \"9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\"), \")\")), 'The base token is the token being traded. For example, the base token of a BTC/USDT market is BTC.');\n  const [quoteMintInput, quoteMintInfo] = useMintInput('quoteMint', /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, \"Quote Token Mint Address\", ' ', /*#__PURE__*/React.createElement(Text, {\n    type: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, \"(e.g. USDT solana address:\", ' ', /*#__PURE__*/React.createElement(Text, {\n    type: \"secondary\",\n    code: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\"), \")\")), 'The quote token is the token used to price trades. For example, the quote token of a BTC/USDT market is USDT.');\n  const [lotSize, setLotSize] = useState('1');\n  const [tickSize, setTickSize] = useState('0.01');\n  const dexProgramId = MARKETS.find(({\n    deprecated\n  }) => !deprecated).programId;\n  const [submitting, setSubmitting] = useState(false);\n  const [listedMarket, setListedMarket] = useState(null);\n  let baseLotSize;\n  let quoteLotSize;\n\n  if (baseMintInfo && parseFloat(lotSize) > 0) {\n    baseLotSize = Math.round(10 ** baseMintInfo.decimals * parseFloat(lotSize));\n\n    if (quoteMintInfo && parseFloat(tickSize) > 0) {\n      quoteLotSize = Math.round(parseFloat(lotSize) * 10 ** quoteMintInfo.decimals * parseFloat(tickSize));\n    }\n  }\n\n  const canSubmit = connected && !!baseMintInfo && !!quoteMintInfo && !!baseLotSize && !!quoteLotSize;\n\n  async function onSubmit() {\n    if (!canSubmit) {\n      return;\n    }\n\n    setSubmitting(true);\n\n    try {\n      const marketAddress = await listMarket({\n        connection,\n        wallet,\n        baseMint: baseMintInfo.address,\n        quoteMint: quoteMintInfo.address,\n        baseLotSize,\n        quoteLotSize,\n        dexProgramId\n      });\n      setListedMarket(marketAddress);\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error listing new market',\n        description: e.message,\n        type: 'error'\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FloatingElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, \"List New Market\"), /*#__PURE__*/React.createElement(Form, {\n    labelCol: {\n      span: 24\n    },\n    wrapperCol: {\n      span: 24\n    },\n    layout: 'vertical',\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, baseMintInput, quoteMintInput, /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Smallest allowed order size. For a BTC/USDT market, this would be in units of BTC.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }, \"Minimum Order Size\", ' ', /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, \"(Lot size in e.g. BTC)\")),\n    name: \"lotSize\",\n    initialValue: \"1\",\n    validateStatus: baseMintInfo && quoteMintInfo ? baseLotSize ? 'success' : 'error' : null,\n    hasFeedback: baseMintInfo && quoteMintInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: lotSize,\n    onChange: e => setLotSize(e.target.value.trim()),\n    type: \"number\",\n    min: \"0\",\n    step: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: /*#__PURE__*/React.createElement(Tooltip, {\n      title: \"Smallest amount by which prices can move. For a BTC/USDT market, this would be in units of USDT.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, \"Tick Size\", ' ', /*#__PURE__*/React.createElement(Text, {\n      type: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, \"(Price increment in e.g. USDT)\")),\n    name: \"tickSize\",\n    initialValue: \"0.01\",\n    validateStatus: baseMintInfo && quoteMintInfo ? quoteLotSize ? 'success' : 'error' : null,\n    hasFeedback: baseMintInfo && quoteMintInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    value: tickSize,\n    onChange: e => setTickSize(e.target.value.trim()),\n    type: \"number\",\n    min: \"0\",\n    step: \"any\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    label: \" \",\n    colon: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    disabled: !canSubmit,\n    loading: submitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, connected ? 'Submit' : 'Not connected to wallet')))), listedMarket ? /*#__PURE__*/React.createElement(FloatingElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, \"New market address: \", listedMarket.toBase58())) : null);\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/ListNewMarketPage.jsx"],"names":["React","useState","Button","Form","Input","Tooltip","Typography","notify","MARKETS","useConnection","FloatingElement","styled","useWallet","listMarket","useMintInput","Text","Title","Wrapper","div","ListNewMarketPage","connection","wallet","connected","baseMintInput","baseMintInfo","quoteMintInput","quoteMintInfo","lotSize","setLotSize","tickSize","setTickSize","dexProgramId","find","deprecated","programId","submitting","setSubmitting","listedMarket","setListedMarket","baseLotSize","quoteLotSize","parseFloat","Math","round","decimals","canSubmit","onSubmit","marketAddress","baseMint","address","quoteMint","e","console","warn","message","description","type","span","target","value","trim","toBase58"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Form, Input, Tooltip, Typography } from 'antd';\nimport { notify } from '../utils/notifications';\nimport { MARKETS } from '@project-serum/serum';\nimport { useConnection } from '../utils/connection';\nimport FloatingElement from '../components/layout/FloatingElement';\nimport styled from 'styled-components';\nimport { useWallet } from '../utils/wallet';\nimport { listMarket } from '../utils/send';\nimport { useMintInput } from '../components/useMintInput';\n\nconst { Text, Title } = Typography;\n\nconst Wrapper = styled.div`\n  max-width: 800px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 24px;\n  margin-bottom: 24px;\n`;\n\nexport default function ListNewMarketPage() {\n  const connection = useConnection();\n  const { wallet, connected } = useWallet();\n  const [baseMintInput, baseMintInfo] = useMintInput(\n    'baseMint',\n    <Text>\n      Base Token Mint Address{' '}\n      <Text type=\"secondary\">\n        (e.g. BTC solana address:{' '}\n        {\n          <Text type=\"secondary\" code>\n            9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E\n          </Text>\n        }\n        )\n      </Text>\n    </Text>,\n    'The base token is the token being traded. For example, the base token of a BTC/USDT market is BTC.',\n  );\n  const [quoteMintInput, quoteMintInfo] = useMintInput(\n    'quoteMint',\n    <Text>\n      Quote Token Mint Address{' '}\n      <Text type=\"secondary\">\n        (e.g. USDT solana address:{' '}\n        {\n          <Text type=\"secondary\" code>\n            BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4\n          </Text>\n        }\n        )\n      </Text>\n    </Text>,\n    'The quote token is the token used to price trades. For example, the quote token of a BTC/USDT market is USDT.',\n  );\n  const [lotSize, setLotSize] = useState('1');\n  const [tickSize, setTickSize] = useState('0.01');\n  const dexProgramId = MARKETS.find(({ deprecated }) => !deprecated).programId;\n  const [submitting, setSubmitting] = useState(false);\n\n  const [listedMarket, setListedMarket] = useState(null);\n\n  let baseLotSize;\n  let quoteLotSize;\n  if (baseMintInfo && parseFloat(lotSize) > 0) {\n    baseLotSize = Math.round(10 ** baseMintInfo.decimals * parseFloat(lotSize));\n    if (quoteMintInfo && parseFloat(tickSize) > 0) {\n      quoteLotSize = Math.round(\n        parseFloat(lotSize) *\n          10 ** quoteMintInfo.decimals *\n          parseFloat(tickSize),\n      );\n    }\n  }\n\n  const canSubmit =\n    connected &&\n    !!baseMintInfo &&\n    !!quoteMintInfo &&\n    !!baseLotSize &&\n    !!quoteLotSize;\n\n  async function onSubmit() {\n    if (!canSubmit) {\n      return;\n    }\n    setSubmitting(true);\n    try {\n      const marketAddress = await listMarket({\n        connection,\n        wallet,\n        baseMint: baseMintInfo.address,\n        quoteMint: quoteMintInfo.address,\n        baseLotSize,\n        quoteLotSize,\n        dexProgramId,\n      });\n      setListedMarket(marketAddress);\n    } catch (e) {\n      console.warn(e);\n      notify({\n        message: 'Error listing new market',\n        description: e.message,\n        type: 'error',\n      });\n    } finally {\n      setSubmitting(false);\n    }\n  }\n\n  return (\n    <Wrapper>\n      <FloatingElement>\n        <Title level={4}>List New Market</Title>\n        <Form\n          labelCol={{ span: 24 }}\n          wrapperCol={{ span: 24 }}\n          layout={'vertical'}\n          onFinish={onSubmit}\n        >\n          {baseMintInput}\n          {quoteMintInput}\n          <Form.Item\n            label={\n              <Tooltip title=\"Smallest allowed order size. For a BTC/USDT market, this would be in units of BTC.\">\n                Minimum Order Size{' '}\n                <Text type=\"secondary\">(Lot size in e.g. BTC)</Text>\n              </Tooltip>\n            }\n            name=\"lotSize\"\n            initialValue=\"1\"\n            validateStatus={\n              baseMintInfo && quoteMintInfo\n                ? baseLotSize\n                  ? 'success'\n                  : 'error'\n                : null\n            }\n            hasFeedback={baseMintInfo && quoteMintInfo}\n          >\n            <Input\n              value={lotSize}\n              onChange={(e) => setLotSize(e.target.value.trim())}\n              type=\"number\"\n              min=\"0\"\n              step=\"any\"\n            />\n          </Form.Item>\n          <Form.Item\n            label={\n              <Tooltip title=\"Smallest amount by which prices can move. For a BTC/USDT market, this would be in units of USDT.\">\n                Tick Size{' '}\n                <Text type=\"secondary\">(Price increment in e.g. USDT)</Text>\n              </Tooltip>\n            }\n            name=\"tickSize\"\n            initialValue=\"0.01\"\n            validateStatus={\n              baseMintInfo && quoteMintInfo\n                ? quoteLotSize\n                  ? 'success'\n                  : 'error'\n                : null\n            }\n            hasFeedback={baseMintInfo && quoteMintInfo}\n          >\n            <Input\n              value={tickSize}\n              onChange={(e) => setTickSize(e.target.value.trim())}\n              type=\"number\"\n              min=\"0\"\n              step=\"any\"\n            />\n          </Form.Item>\n          <Form.Item label=\" \" colon={false}>\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              disabled={!canSubmit}\n              loading={submitting}\n            >\n              {connected ? 'Submit' : 'Not connected to wallet'}\n            </Button>\n          </Form.Item>\n        </Form>\n      </FloatingElement>\n      {listedMarket ? (\n        <FloatingElement>\n          <Text>New market address: {listedMarket.toBase58()}</Text>\n        </FloatingElement>\n      ) : null}\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}