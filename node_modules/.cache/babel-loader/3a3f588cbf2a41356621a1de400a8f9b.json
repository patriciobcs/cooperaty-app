{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nimport { notify } from '../../utils/notifications';\nimport { DEFAULT_PUBLIC_KEY } from '../types';\nexport class PhantomWalletAdapter extends EventEmitter {\n  constructor() {\n    super();\n\n    this._handleConnect = (...args) => {\n      this.emit('connect', ...args);\n    };\n\n    this._handleDisconnect = (...args) => {\n      this.emit('disconnect', ...args);\n    };\n\n    this.connect = this.connect.bind(this);\n  }\n\n  get _provider() {\n    var _ref, _ref$solana;\n\n    if ((_ref = window) === null || _ref === void 0 ? void 0 : (_ref$solana = _ref.solana) === null || _ref$solana === void 0 ? void 0 : _ref$solana.isPhantom) {\n      return window.solana;\n    }\n\n    return undefined;\n  }\n\n  get connected() {\n    var _this$_provider;\n\n    return ((_this$_provider = this._provider) === null || _this$_provider === void 0 ? void 0 : _this$_provider.isConnected) || false;\n  }\n\n  get autoApprove() {\n    var _this$_provider2;\n\n    return ((_this$_provider2 = this._provider) === null || _this$_provider2 === void 0 ? void 0 : _this$_provider2.autoApprove) || false;\n  }\n\n  async signAllTransactions(transactions) {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  get publicKey() {\n    var _this$_provider3;\n\n    return ((_this$_provider3 = this._provider) === null || _this$_provider3 === void 0 ? void 0 : _this$_provider3.publicKey) || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect() {\n    var _this$_provider6;\n\n    if (!this._provider) {\n      window.open('https://phantom.app/', '_blank');\n      notify({\n        message: 'Connection Error',\n        description: 'Please install Phantom wallet'\n      });\n      return;\n    }\n\n    if (!this._provider.listeners('connect').length) {\n      var _this$_provider4;\n\n      (_this$_provider4 = this._provider) === null || _this$_provider4 === void 0 ? void 0 : _this$_provider4.on('connect', this._handleConnect);\n    }\n\n    if (!this._provider.listeners('disconnect').length) {\n      var _this$_provider5;\n\n      (_this$_provider5 = this._provider) === null || _this$_provider5 === void 0 ? void 0 : _this$_provider5.on('disconnect', this._handleDisconnect);\n    }\n\n    return (_this$_provider6 = this._provider) === null || _this$_provider6 === void 0 ? void 0 : _this$_provider6.connect();\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect();\n    }\n  }\n\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/cooperaty-app/src/wallet-adapters/phantom/index.tsx"],"names":["EventEmitter","notify","DEFAULT_PUBLIC_KEY","PhantomWalletAdapter","constructor","_handleConnect","args","emit","_handleDisconnect","connect","bind","_provider","window","solana","isPhantom","undefined","connected","isConnected","autoApprove","signAllTransactions","transactions","publicKey","signTransaction","transaction","open","message","description","listeners","length","on","disconnect"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,kBAAT,QAAkD,UAAlD;AAsBA,OAAO,MAAMC,oBAAN,SACGH,YADH,CAEoB;AACzBI,EAAAA,WAAW,GAAG;AACZ;;AADY,SAYNC,cAZM,GAYW,CAAC,GAAGC,IAAJ,KAAa;AACpC,WAAKC,IAAL,CAAU,SAAV,EAAqB,GAAGD,IAAxB;AACD,KAda;;AAAA,SAgBNE,iBAhBM,GAgBc,CAAC,GAAGF,IAAJ,KAAa;AACvC,WAAKC,IAAL,CAAU,YAAV,EAAwB,GAAGD,IAA3B;AACD,KAlBa;;AAEZ,SAAKG,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEoB,MAATC,SAAS,GAAgC;AAAA;;AACnD,gBAAKC,MAAL,wDAAI,KAAiBC,MAArB,gDAAI,YAAyBC,SAA7B,EAAwC;AACtC,aAAQF,MAAD,CAAgBC,MAAvB;AACD;;AACD,WAAOE,SAAP;AACD;;AAUY,MAATC,SAAS,GAAG;AAAA;;AACd,WAAO,yBAAKL,SAAL,oEAAgBM,WAAhB,KAA+B,KAAtC;AACD;;AAEc,MAAXC,WAAW,GAAG;AAAA;;AAChB,WAAO,0BAAKP,SAAL,sEAAgBO,WAAhB,KAA+B,KAAtC;AACD;;AAEwB,QAAnBC,mBAAmB,CACvBC,YADuB,EAEC;AACxB,QAAI,CAAC,KAAKT,SAAV,EAAqB;AACnB,aAAOS,YAAP;AACD;;AAED,WAAO,KAAKT,SAAL,CAAeQ,mBAAf,CAAmCC,YAAnC,CAAP;AACD;;AAEY,MAATC,SAAS,GAAG;AAAA;;AACd,WAAO,0BAAKV,SAAL,sEAAgBU,SAAhB,KAA6BnB,kBAApC;AACD;;AAEoB,QAAfoB,eAAe,CAACC,WAAD,EAA2B;AAC9C,QAAI,CAAC,KAAKZ,SAAV,EAAqB;AACnB,aAAOY,WAAP;AACD;;AAED,WAAO,KAAKZ,SAAL,CAAeW,eAAf,CAA+BC,WAA/B,CAAP;AACD;;AAEDd,EAAAA,OAAO,GAAG;AAAA;;AACR,QAAI,CAAC,KAAKE,SAAV,EAAqB;AACnBC,MAAAA,MAAM,CAACY,IAAP,CAAY,sBAAZ,EAAoC,QAApC;AACAvB,MAAAA,MAAM,CAAC;AACLwB,QAAAA,OAAO,EAAE,kBADJ;AAELC,QAAAA,WAAW,EAAE;AAFR,OAAD,CAAN;AAIA;AACD;;AACD,QAAI,CAAC,KAAKf,SAAL,CAAegB,SAAf,CAAyB,SAAzB,EAAoCC,MAAzC,EAAiD;AAAA;;AAC/C,+BAAKjB,SAAL,sEAAgBkB,EAAhB,CAAmB,SAAnB,EAA8B,KAAKxB,cAAnC;AACD;;AACD,QAAI,CAAC,KAAKM,SAAL,CAAegB,SAAf,CAAyB,YAAzB,EAAuCC,MAA5C,EAAoD;AAAA;;AAClD,+BAAKjB,SAAL,sEAAgBkB,EAAhB,CAAmB,YAAnB,EAAiC,KAAKrB,iBAAtC;AACD;;AACD,+BAAO,KAAKG,SAAZ,qDAAO,iBAAgBF,OAAhB,EAAP;AACD;;AAEDqB,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKnB,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAemB,UAAf;AACD;AACF;;AAzEwB","sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { notify } from '../../utils/notifications';\nimport { DEFAULT_PUBLIC_KEY, WalletAdapter } from '../types';\n\ntype PhantomEvent = 'disconnect' | 'connect';\ntype PhantomRequestMethod =\n  | 'connect'\n  | 'disconnect'\n  | 'signTransaction'\n  | 'signAllTransactions';\n\ninterface PhantomProvider {\n  publicKey?: PublicKey;\n  isConnected?: boolean;\n  autoApprove?: boolean;\n  signTransaction: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;\n  connect: () => Promise<void>;\n  disconnect: () => Promise<void>;\n  on: (event: PhantomEvent, handler: (args: any) => void) => void;\n  request: (method: PhantomRequestMethod, params: any) => Promise<any>;\n  listeners: (event: PhantomEvent) => (() => void)[];\n}\n\nexport class PhantomWalletAdapter\n  extends EventEmitter\n  implements WalletAdapter {\n  constructor() {\n    super();\n    this.connect = this.connect.bind(this);\n  }\n\n  private get _provider(): PhantomProvider | undefined {\n    if ((window as any)?.solana?.isPhantom) {\n      return (window as any).solana;\n    }\n    return undefined;\n  }\n\n  private _handleConnect = (...args) => {\n    this.emit('connect', ...args);\n  }\n\n  private _handleDisconnect = (...args) => {\n    this.emit('disconnect', ...args);\n  }\n\n  get connected() {\n    return this._provider?.isConnected || false;\n  }\n\n  get autoApprove() {\n    return this._provider?.autoApprove || false;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[],\n  ): Promise<Transaction[]> {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  get publicKey() {\n    return this._provider?.publicKey || DEFAULT_PUBLIC_KEY;\n  }\n\n  async signTransaction(transaction: Transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect() {\n    if (!this._provider) {\n      window.open('https://phantom.app/', '_blank');\n      notify({\n        message: 'Connection Error',\n        description: 'Please install Phantom wallet',\n      });\n      return;\n    }\n    if (!this._provider.listeners('connect').length) {\n      this._provider?.on('connect', this._handleConnect);\n    }\n    if (!this._provider.listeners('disconnect').length) {\n      this._provider?.on('disconnect', this._handleDisconnect);\n    }\n    return this._provider?.connect();\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}