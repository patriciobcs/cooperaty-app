{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/components/TradingView/index.tsx\";\nimport * as React from 'react';\nimport './index.css';\nimport { widget } from '../../charting_library';\nimport { useMarket, USE_MARKETS } from '../../utils/markets';\nimport * as saveLoadAdapter from './saveLoadAdapter';\nimport { flatten } from '../../utils/utils';\nimport { BONFIDA_DATA_FEED } from '../../utils/bonfidaConnector';\nexport const TVChartContainer = () => {\n  // let datafeed = useTvDataFeed();\n  const defaultProps = {\n    symbol: 'BTC/USDC',\n    // @ts-ignore\n    interval: '60',\n    auto_save_delay: 5,\n    theme: 'Dark',\n    containerId: 'tv_chart_container',\n    // datafeed: datafeed,\n    libraryPath: '/charting_library/',\n    chartsStorageApiVersion: '1.1',\n    clientId: 'tradingview.com',\n    userId: 'public_user_id',\n    fullscreen: false,\n    autosize: true,\n    datafeedUrl: BONFIDA_DATA_FEED,\n    studiesOverrides: {}\n  };\n  const tvWidgetRef = React.useRef(null);\n  const {\n    market\n  } = useMarket();\n  const chartProperties = JSON.parse(localStorage.getItem('chartproperties') || '{}');\n  React.useEffect(() => {\n    var _USE_MARKETS$find;\n\n    const savedProperties = flatten(chartProperties, {\n      restrictTo: ['scalesProperties', 'paneProperties', 'tradingProperties']\n    });\n    const widgetOptions = {\n      symbol: ((_USE_MARKETS$find = USE_MARKETS.find(m => m.address.toBase58() === (market === null || market === void 0 ? void 0 : market.publicKey.toBase58()))) === null || _USE_MARKETS$find === void 0 ? void 0 : _USE_MARKETS$find.name) || 'SRM/USDC',\n      // BEWARE: no trailing slash is expected in feed URL\n      // tslint:disable-next-line:no-any\n      // @ts-ignore\n      // datafeed: datafeed,\n      // @ts-ignore\n      datafeed: new window.Datafeeds.UDFCompatibleDatafeed(defaultProps.datafeedUrl),\n      interval: defaultProps.interval,\n      container_id: defaultProps.containerId,\n      library_path: defaultProps.libraryPath,\n      auto_save_delay: 5,\n      locale: 'en',\n      disabled_features: ['use_localstorage_for_settings'],\n      enabled_features: ['study_templates'],\n      load_last_chart: true,\n      client_id: defaultProps.clientId,\n      user_id: defaultProps.userId,\n      fullscreen: defaultProps.fullscreen,\n      autosize: defaultProps.autosize,\n      studies_overrides: defaultProps.studiesOverrides,\n      theme: defaultProps.theme === 'Dark' ? 'Dark' : 'Light',\n      overrides: { ...savedProperties,\n        'mainSeriesProperties.candleStyle.upColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.downColor': '#F23B69',\n        'mainSeriesProperties.candleStyle.borderUpColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.borderDownColor': '#F23B69',\n        'mainSeriesProperties.candleStyle.wickUpColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.wickDownColor': '#F23B69'\n      },\n      // @ts-ignore\n      save_load_adapter: saveLoadAdapter,\n      settings_adapter: {\n        initialSettings: {\n          'trading.orderPanelSettingsBroker': JSON.stringify({\n            showRelativePriceControl: false,\n            showCurrencyRiskInQty: false,\n            showPercentRiskInQty: false,\n            showBracketsInCurrency: false,\n            showBracketsInPercent: false\n          }),\n          // \"proterty\"\n          'trading.chart.proterty': localStorage.getItem('trading.chart.proterty') || JSON.stringify({\n            hideFloatingPanel: 1\n          }),\n          'chart.favoriteDrawings': localStorage.getItem('chart.favoriteDrawings') || JSON.stringify([]),\n          'chart.favoriteDrawingsPosition': localStorage.getItem('chart.favoriteDrawingsPosition') || JSON.stringify({})\n        },\n        setValue: (key, value) => {\n          localStorage.setItem(key, value);\n        },\n        removeValue: key => {\n          localStorage.removeItem(key);\n        }\n      }\n    };\n    const tvWidget = new widget(widgetOptions);\n    tvWidget.onChartReady(() => {\n      tvWidgetRef.current = tvWidget;\n      tvWidget // @ts-ignore\n      .subscribe('onAutoSaveNeeded', () => tvWidget.saveChartToServer());\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [market, tvWidgetRef.current]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: defaultProps.containerId,\n    className: 'TVChartContainer',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/components/TradingView/index.tsx"],"names":["React","widget","useMarket","USE_MARKETS","saveLoadAdapter","flatten","BONFIDA_DATA_FEED","TVChartContainer","defaultProps","symbol","interval","auto_save_delay","theme","containerId","libraryPath","chartsStorageApiVersion","clientId","userId","fullscreen","autosize","datafeedUrl","studiesOverrides","tvWidgetRef","useRef","market","chartProperties","JSON","parse","localStorage","getItem","useEffect","savedProperties","restrictTo","widgetOptions","find","m","address","toBase58","publicKey","name","datafeed","window","Datafeeds","UDFCompatibleDatafeed","container_id","library_path","locale","disabled_features","enabled_features","load_last_chart","client_id","user_id","studies_overrides","overrides","save_load_adapter","settings_adapter","initialSettings","stringify","showRelativePriceControl","showCurrencyRiskInQty","showPercentRiskInQty","showBracketsInCurrency","showBracketsInPercent","hideFloatingPanel","setValue","key","value","setItem","removeValue","removeItem","tvWidget","onChartReady","current","subscribe","saveChartToServer"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport './index.css';\nimport {\n  widget,\n  ChartingLibraryWidgetOptions,\n  IChartingLibraryWidget,\n} from '../../charting_library';\nimport { useMarket, USE_MARKETS } from '../../utils/markets';\nimport * as saveLoadAdapter from './saveLoadAdapter';\nimport { flatten } from '../../utils/utils';\nimport { BONFIDA_DATA_FEED } from '../../utils/bonfidaConnector';\n\nexport interface ChartContainerProps {\n  symbol: ChartingLibraryWidgetOptions['symbol'];\n  interval: ChartingLibraryWidgetOptions['interval'];\n  auto_save_delay: ChartingLibraryWidgetOptions['auto_save_delay'];\n\n  // BEWARE: no trailing slash is expected in feed URL\n  // datafeed: any;\n  datafeedUrl: string;\n  libraryPath: ChartingLibraryWidgetOptions['library_path'];\n  chartsStorageUrl: ChartingLibraryWidgetOptions['charts_storage_url'];\n  chartsStorageApiVersion: ChartingLibraryWidgetOptions['charts_storage_api_version'];\n  clientId: ChartingLibraryWidgetOptions['client_id'];\n  userId: ChartingLibraryWidgetOptions['user_id'];\n  fullscreen: ChartingLibraryWidgetOptions['fullscreen'];\n  autosize: ChartingLibraryWidgetOptions['autosize'];\n  studiesOverrides: ChartingLibraryWidgetOptions['studies_overrides'];\n  containerId: ChartingLibraryWidgetOptions['container_id'];\n  theme: string;\n}\n\nexport interface ChartContainerState {}\n\nexport const TVChartContainer = () => {\n  // let datafeed = useTvDataFeed();\n  const defaultProps: ChartContainerProps = {\n    symbol: 'BTC/USDC',\n    // @ts-ignore\n    interval: '60',\n    auto_save_delay: 5,\n    theme: 'Dark',\n    containerId: 'tv_chart_container',\n    // datafeed: datafeed,\n    libraryPath: '/charting_library/',\n    chartsStorageApiVersion: '1.1',\n    clientId: 'tradingview.com',\n    userId: 'public_user_id',\n    fullscreen: false,\n    autosize: true,\n    datafeedUrl: BONFIDA_DATA_FEED,\n    studiesOverrides: {},\n  };\n\n  const tvWidgetRef = React.useRef<IChartingLibraryWidget | null>(null);\n  const { market } = useMarket();\n\n  const chartProperties = JSON.parse(\n    localStorage.getItem('chartproperties') || '{}',\n  );\n\n  React.useEffect(() => {\n    const savedProperties = flatten(chartProperties, {\n      restrictTo: ['scalesProperties', 'paneProperties', 'tradingProperties'],\n    });\n\n    const widgetOptions: ChartingLibraryWidgetOptions = {\n      symbol:\n        USE_MARKETS.find(\n          (m) => m.address.toBase58() === market?.publicKey.toBase58(),\n        )?.name || 'SRM/USDC',\n      // BEWARE: no trailing slash is expected in feed URL\n      // tslint:disable-next-line:no-any\n      // @ts-ignore\n      // datafeed: datafeed,\n      // @ts-ignore\n      datafeed: new (window as any).Datafeeds.UDFCompatibleDatafeed(\n        defaultProps.datafeedUrl,\n      ),\n      interval: defaultProps.interval as ChartingLibraryWidgetOptions['interval'],\n      container_id: defaultProps.containerId as ChartingLibraryWidgetOptions['container_id'],\n      library_path: defaultProps.libraryPath as string,\n      auto_save_delay: 5,\n\n      locale: 'en',\n      disabled_features: ['use_localstorage_for_settings'],\n      enabled_features: ['study_templates'],\n      load_last_chart: true,\n      client_id: defaultProps.clientId,\n      user_id: defaultProps.userId,\n      fullscreen: defaultProps.fullscreen,\n      autosize: defaultProps.autosize,\n      studies_overrides: defaultProps.studiesOverrides,\n      theme: defaultProps.theme === 'Dark' ? 'Dark' : 'Light',\n      overrides: {\n        ...savedProperties,\n        'mainSeriesProperties.candleStyle.upColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.downColor': '#F23B69',\n        'mainSeriesProperties.candleStyle.borderUpColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.borderDownColor': '#F23B69',\n        'mainSeriesProperties.candleStyle.wickUpColor': '#41C77A',\n        'mainSeriesProperties.candleStyle.wickDownColor': '#F23B69',\n      },\n      // @ts-ignore\n      save_load_adapter: saveLoadAdapter,\n      settings_adapter: {\n        initialSettings: {\n          'trading.orderPanelSettingsBroker': JSON.stringify({\n            showRelativePriceControl: false,\n            showCurrencyRiskInQty: false,\n            showPercentRiskInQty: false,\n            showBracketsInCurrency: false,\n            showBracketsInPercent: false,\n          }),\n          // \"proterty\"\n          'trading.chart.proterty':\n            localStorage.getItem('trading.chart.proterty') ||\n            JSON.stringify({\n              hideFloatingPanel: 1,\n            }),\n          'chart.favoriteDrawings':\n            localStorage.getItem('chart.favoriteDrawings') ||\n            JSON.stringify([]),\n          'chart.favoriteDrawingsPosition':\n            localStorage.getItem('chart.favoriteDrawingsPosition') ||\n            JSON.stringify({}),\n        },\n        setValue: (key, value) => {\n          localStorage.setItem(key, value);\n        },\n        removeValue: (key) => {\n          localStorage.removeItem(key);\n        },\n      },\n    };\n\n    const tvWidget = new widget(widgetOptions);\n\n    tvWidget.onChartReady(() => {\n      tvWidgetRef.current = tvWidget;\n      tvWidget\n        // @ts-ignore\n        .subscribe('onAutoSaveNeeded', () => tvWidget.saveChartToServer());\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [market, tvWidgetRef.current]);\n\n  return <div id={defaultProps.containerId} className={'TVChartContainer'} />;\n};\n"]},"metadata":{},"sourceType":"module"}