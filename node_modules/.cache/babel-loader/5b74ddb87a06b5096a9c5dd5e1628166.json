{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isAdminControlledPool = exports.ADMIN_CONTROLLED_POOL_TAG = exports.AdminControlledPoolInstructions = exports.AdminRequest = exports.ADMIN_INSTRUCTION_TAG = void 0;\n\nconst buffer_layout_1 = require(\"buffer-layout\");\n\nconst borsh_1 = require(\"@project-serum/borsh\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst token_instructions_1 = require(\"@project-serum/serum/lib/token-instructions\");\n\nexports.ADMIN_INSTRUCTION_TAG = new bn_js_1.default('31e6452361a17878', 'hex');\nexports.AdminRequest = borsh_1.tagged(exports.ADMIN_INSTRUCTION_TAG, borsh_1.rustEnum([buffer_layout_1.struct([], 'pause'), buffer_layout_1.struct([], 'unpause'), buffer_layout_1.struct([borsh_1.u64('amount')], 'approveDelegate'), buffer_layout_1.struct([], 'addAsset'), buffer_layout_1.struct([], 'removeAsset'), buffer_layout_1.struct([buffer_layout_1.u32('feeRate')], 'updateFee'), buffer_layout_1.struct([], 'updateAdmin')]));\n\nfunction encodeAdminRequest(request) {\n  const buffer = Buffer.alloc(1000);\n  const len = exports.AdminRequest.encode(request, buffer);\n  return buffer.slice(0, len);\n}\n\nfunction makeAdminInstruction(pool, request, keys) {\n  if (!pool.state.adminKey) {\n    throw new Error('Pool does not have admin');\n  }\n\n  return new web3_js_1.TransactionInstruction({\n    keys: [{\n      pubkey: pool.address,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: pool.state.adminKey,\n      isSigner: true,\n      isWritable: false\n    }, ...(keys !== null && keys !== void 0 ? keys : [])],\n    programId: pool.program,\n    data: encodeAdminRequest(request)\n  });\n}\n/** Instructions for interacting with the example admin-controlled pool. */\n\n\nclass AdminControlledPoolInstructions {\n  /** Pauses creations and redemptions for the pool. */\n  static pause(pool) {\n    return makeAdminInstruction(pool, {\n      pause: {}\n    });\n  }\n  /**\n   * Resumes creations and redemptions for the pool.\n   *\n   * Pool assets must not have any outstanding delegates.\n   */\n\n\n  static unpause(pool) {\n    return makeAdminInstruction(pool, {\n      unpause: {}\n    }, pool.state.assets.map(asset => ({\n      pubkey: asset.vaultAddress,\n      isSigner: false,\n      isWritable: false\n    })));\n  }\n  /** Approves an account to spend tokens on behalf of the pool. */\n\n\n  static approveDelegate(pool, vault, delegate, amount) {\n    return makeAdminInstruction(pool, {\n      approveDelegate: {\n        amount\n      }\n    }, [{\n      pubkey: vault,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: delegate,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: pool.state.vaultSigner,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: token_instructions_1.TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }]);\n  }\n  /** Adds a new asset to the pool. */\n\n\n  static addAsset(pool, vault) {\n    return makeAdminInstruction(pool, {\n      addAsset: {}\n    }, [{\n      pubkey: vault,\n      isSigner: false,\n      isWritable: false\n    }]);\n  }\n  /**\n   * Removes an asset from the pool.\n   *\n   * The pool must not currently own any tokens of the asset to be removed.\n   */\n\n\n  static removeAsset(pool, vault) {\n    return makeAdminInstruction(pool, {\n      removeAsset: {}\n    }, [{\n      pubkey: vault,\n      isSigner: false,\n      isWritable: false\n    }]);\n  }\n  /** Modifies the fee rate for the pool. */\n\n\n  static updateFee(pool, feeRate) {\n    return makeAdminInstruction(pool, {\n      updateFee: {\n        feeRate\n      }\n    });\n  }\n  /** Transfers admin permission for the pool to a new account. */\n\n\n  static updateAdmin(pool, newAdmin) {\n    return makeAdminInstruction(pool, {\n      updateAdmin: {}\n    }, [{\n      pubkey: newAdmin,\n      isSigner: true,\n      isWritable: false\n    }]);\n  }\n\n}\n\nexports.AdminControlledPoolInstructions = AdminControlledPoolInstructions;\nexports.ADMIN_CONTROLLED_POOL_TAG = new bn_js_1.default('4a3ab7f76f93f94e', 'hex');\n\nfunction isAdminControlledPool(pool) {\n  return pool.state.customState.slice(0, 8).equals(exports.ADMIN_CONTROLLED_POOL_TAG.toArrayLike(Buffer, 'le', 8));\n}\n\nexports.isAdminControlledPool = isAdminControlledPool;","map":{"version":3,"sources":["../../src/admin-controlled-pool.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAKA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AAEA,MAAA,oBAAA,GAAA,OAAA,CAAA,6CAAA,CAAA;;AAWa,OAAA,CAAA,qBAAA,GAAwB,IAAI,OAAA,CAAA,OAAJ,CAAO,kBAAP,EAA2B,KAA3B,CAAxB;AAEA,OAAA,CAAA,YAAA,GAAqC,OAAA,CAAA,MAAA,CAChD,OAAA,CAAA,qBADgD,EAEhD,OAAA,CAAA,QAAA,CAAS,CACP,eAAA,CAAA,MAAA,CAAO,EAAP,EAAW,OAAX,CADO,EAEP,eAAA,CAAA,MAAA,CAAO,EAAP,EAAW,SAAX,CAFO,EAGP,eAAA,CAAA,MAAA,CAAO,CAAC,OAAA,CAAA,GAAA,CAAI,QAAJ,CAAD,CAAP,EAAwB,iBAAxB,CAHO,EAIP,eAAA,CAAA,MAAA,CAAO,EAAP,EAAW,UAAX,CAJO,EAKP,eAAA,CAAA,MAAA,CAAO,EAAP,EAAW,aAAX,CALO,EAMP,eAAA,CAAA,MAAA,CAAO,CAAC,eAAA,CAAA,GAAA,CAAI,SAAJ,CAAD,CAAP,EAAyB,WAAzB,CANO,EAOP,eAAA,CAAA,MAAA,CAAO,EAAP,EAAW,aAAX,CAPO,CAAT,CAFgD,CAArC;;AAab,SAAS,kBAAT,CAA4B,OAA5B,EAAiD;AAC/C,QAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf;AACA,QAAM,GAAG,GAAG,OAAA,CAAA,YAAA,CAAa,MAAb,CAAoB,OAApB,EAA6B,MAA7B,CAAZ;AACA,SAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAP;AACD;;AAED,SAAS,oBAAT,CACE,IADF,EAEE,OAFF,EAGE,IAHF,EAG2B;AAEzB,MAAI,CAAC,IAAI,CAAC,KAAL,CAAW,QAAhB,EAA0B;AACxB,UAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACD;;AACD,SAAO,IAAI,SAAA,CAAA,sBAAJ,CAA2B;AAChC,IAAA,IAAI,EAAE,CACJ;AAAE,MAAA,MAAM,EAAE,IAAI,CAAC,OAAf;AAAwB,MAAA,QAAQ,EAAE,KAAlC;AAAyC,MAAA,UAAU,EAAE;AAArD,KADI,EAEJ;AAAE,MAAA,MAAM,EAAE,IAAI,CAAC,KAAL,CAAW,QAArB;AAA+B,MAAA,QAAQ,EAAE,IAAzC;AAA+C,MAAA,UAAU,EAAE;AAA3D,KAFI,EAGJ,IAAI,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAA,IAAA,GAAQ,EAAZ,CAHI,CAD0B;AAMhC,IAAA,SAAS,EAAE,IAAI,CAAC,OANgB;AAOhC,IAAA,IAAI,EAAE,kBAAkB,CAAC,OAAD;AAPQ,GAA3B,CAAP;AASD;AAED;;;AACA,MAAa,+BAAb,CAA4C;AAC1C;AACY,SAAL,KAAK,CAAC,IAAD,EAAe;AACzB,WAAO,oBAAoB,CAAC,IAAD,EAAO;AAAE,MAAA,KAAK,EAAE;AAAT,KAAP,CAA3B;AACD;AACD;;;;AAIG;;;AACW,SAAP,OAAO,CAAC,IAAD,EAAe;AAC3B,WAAO,oBAAoB,CACzB,IADyB,EAEzB;AAAE,MAAA,OAAO,EAAE;AAAX,KAFyB,EAGzB,IAAI,CAAC,KAAL,CAAW,MAAX,CAAkB,GAAlB,CAAsB,KAAK,KAAK;AAC9B,MAAA,MAAM,EAAE,KAAK,CAAC,YADgB;AAE9B,MAAA,QAAQ,EAAE,KAFoB;AAG9B,MAAA,UAAU,EAAE;AAHkB,KAAL,CAA3B,CAHyB,CAA3B;AASD;AAED;;;AACsB,SAAf,eAAe,CACpB,IADoB,EAEpB,KAFoB,EAGpB,QAHoB,EAIpB,MAJoB,EAIV;AAEV,WAAO,oBAAoB,CAAC,IAAD,EAAO;AAAE,MAAA,eAAe,EAAE;AAAE,QAAA;AAAF;AAAnB,KAAP,EAAwC,CACjE;AAAE,MAAA,MAAM,EAAE,KAAV;AAAiB,MAAA,QAAQ,EAAE,KAA3B;AAAkC,MAAA,UAAU,EAAE;AAA9C,KADiE,EAEjE;AAAE,MAAA,MAAM,EAAE,QAAV;AAAoB,MAAA,QAAQ,EAAE,KAA9B;AAAqC,MAAA,UAAU,EAAE;AAAjD,KAFiE,EAGjE;AAAE,MAAA,MAAM,EAAE,IAAI,CAAC,KAAL,CAAW,WAArB;AAAkC,MAAA,QAAQ,EAAE,KAA5C;AAAmD,MAAA,UAAU,EAAE;AAA/D,KAHiE,EAIjE;AAAE,MAAA,MAAM,EAAE,oBAAA,CAAA,gBAAV;AAA4B,MAAA,QAAQ,EAAE,KAAtC;AAA6C,MAAA,UAAU,EAAE;AAAzD,KAJiE,CAAxC,CAA3B;AAMD;AAED;;;AACe,SAAR,QAAQ,CAAC,IAAD,EAAiB,KAAjB,EAAiC;AAC9C,WAAO,oBAAoB,CAAC,IAAD,EAAO;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAAP,EAAyB,CAClD;AAAE,MAAA,MAAM,EAAE,KAAV;AAAiB,MAAA,QAAQ,EAAE,KAA3B;AAAkC,MAAA,UAAU,EAAE;AAA9C,KADkD,CAAzB,CAA3B;AAGD;AAED;;;;AAIG;;;AACe,SAAX,WAAW,CAAC,IAAD,EAAiB,KAAjB,EAAiC;AACjD,WAAO,oBAAoB,CAAC,IAAD,EAAO;AAAE,MAAA,WAAW,EAAE;AAAf,KAAP,EAA4B,CACrD;AAAE,MAAA,MAAM,EAAE,KAAV;AAAiB,MAAA,QAAQ,EAAE,KAA3B;AAAkC,MAAA,UAAU,EAAE;AAA9C,KADqD,CAA5B,CAA3B;AAGD;AAED;;;AACgB,SAAT,SAAS,CAAC,IAAD,EAAiB,OAAjB,EAAgC;AAC9C,WAAO,oBAAoB,CAAC,IAAD,EAAO;AAAE,MAAA,SAAS,EAAE;AAAE,QAAA;AAAF;AAAb,KAAP,CAA3B;AACD;AAED;;;AACkB,SAAX,WAAW,CAChB,IADgB,EAEhB,QAFgB,EAEG;AAEnB,WAAO,oBAAoB,CAAC,IAAD,EAAO;AAAE,MAAA,WAAW,EAAE;AAAf,KAAP,EAA4B,CACrD;AAAE,MAAA,MAAM,EAAE,QAAV;AAAoB,MAAA,QAAQ,EAAE,IAA9B;AAAoC,MAAA,UAAU,EAAE;AAAhD,KADqD,CAA5B,CAA3B;AAGD;;AApEyC;;AAA5C,OAAA,CAAA,+BAAA,GAAA,+BAAA;AAuEa,OAAA,CAAA,yBAAA,GAA4B,IAAI,OAAA,CAAA,OAAJ,CAAO,kBAAP,EAA2B,KAA3B,CAA5B;;AAEb,SAAgB,qBAAhB,CAAsC,IAAtC,EAAoD;AAClD,SAAO,IAAI,CAAC,KAAL,CAAW,WAAX,CACJ,KADI,CACE,CADF,EACK,CADL,EAEJ,MAFI,CAEG,OAAA,CAAA,yBAAA,CAA0B,WAA1B,CAAsC,MAAtC,EAA8C,IAA9C,EAAoD,CAApD,CAFH,CAAP;AAGD;;AAJD,OAAA,CAAA,qBAAA,GAAA,qBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isAdminControlledPool = exports.ADMIN_CONTROLLED_POOL_TAG = exports.AdminControlledPoolInstructions = exports.AdminRequest = exports.ADMIN_INSTRUCTION_TAG = void 0;\nconst buffer_layout_1 = require(\"buffer-layout\");\nconst borsh_1 = require(\"@project-serum/borsh\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst token_instructions_1 = require(\"@project-serum/serum/lib/token-instructions\");\nexports.ADMIN_INSTRUCTION_TAG = new bn_js_1.default('31e6452361a17878', 'hex');\nexports.AdminRequest = borsh_1.tagged(exports.ADMIN_INSTRUCTION_TAG, borsh_1.rustEnum([\n    buffer_layout_1.struct([], 'pause'),\n    buffer_layout_1.struct([], 'unpause'),\n    buffer_layout_1.struct([borsh_1.u64('amount')], 'approveDelegate'),\n    buffer_layout_1.struct([], 'addAsset'),\n    buffer_layout_1.struct([], 'removeAsset'),\n    buffer_layout_1.struct([buffer_layout_1.u32('feeRate')], 'updateFee'),\n    buffer_layout_1.struct([], 'updateAdmin'),\n]));\nfunction encodeAdminRequest(request) {\n    const buffer = Buffer.alloc(1000);\n    const len = exports.AdminRequest.encode(request, buffer);\n    return buffer.slice(0, len);\n}\nfunction makeAdminInstruction(pool, request, keys) {\n    if (!pool.state.adminKey) {\n        throw new Error('Pool does not have admin');\n    }\n    return new web3_js_1.TransactionInstruction({\n        keys: [\n            { pubkey: pool.address, isSigner: false, isWritable: true },\n            { pubkey: pool.state.adminKey, isSigner: true, isWritable: false },\n            ...(keys !== null && keys !== void 0 ? keys : []),\n        ],\n        programId: pool.program,\n        data: encodeAdminRequest(request),\n    });\n}\n/** Instructions for interacting with the example admin-controlled pool. */\nclass AdminControlledPoolInstructions {\n    /** Pauses creations and redemptions for the pool. */\n    static pause(pool) {\n        return makeAdminInstruction(pool, { pause: {} });\n    }\n    /**\n     * Resumes creations and redemptions for the pool.\n     *\n     * Pool assets must not have any outstanding delegates.\n     */\n    static unpause(pool) {\n        return makeAdminInstruction(pool, { unpause: {} }, pool.state.assets.map(asset => ({\n            pubkey: asset.vaultAddress,\n            isSigner: false,\n            isWritable: false,\n        })));\n    }\n    /** Approves an account to spend tokens on behalf of the pool. */\n    static approveDelegate(pool, vault, delegate, amount) {\n        return makeAdminInstruction(pool, { approveDelegate: { amount } }, [\n            { pubkey: vault, isSigner: false, isWritable: true },\n            { pubkey: delegate, isSigner: false, isWritable: false },\n            { pubkey: pool.state.vaultSigner, isSigner: false, isWritable: false },\n            { pubkey: token_instructions_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        ]);\n    }\n    /** Adds a new asset to the pool. */\n    static addAsset(pool, vault) {\n        return makeAdminInstruction(pool, { addAsset: {} }, [\n            { pubkey: vault, isSigner: false, isWritable: false },\n        ]);\n    }\n    /**\n     * Removes an asset from the pool.\n     *\n     * The pool must not currently own any tokens of the asset to be removed.\n     */\n    static removeAsset(pool, vault) {\n        return makeAdminInstruction(pool, { removeAsset: {} }, [\n            { pubkey: vault, isSigner: false, isWritable: false },\n        ]);\n    }\n    /** Modifies the fee rate for the pool. */\n    static updateFee(pool, feeRate) {\n        return makeAdminInstruction(pool, { updateFee: { feeRate } });\n    }\n    /** Transfers admin permission for the pool to a new account. */\n    static updateAdmin(pool, newAdmin) {\n        return makeAdminInstruction(pool, { updateAdmin: {} }, [\n            { pubkey: newAdmin, isSigner: true, isWritable: false },\n        ]);\n    }\n}\nexports.AdminControlledPoolInstructions = AdminControlledPoolInstructions;\nexports.ADMIN_CONTROLLED_POOL_TAG = new bn_js_1.default('4a3ab7f76f93f94e', 'hex');\nfunction isAdminControlledPool(pool) {\n    return pool.state.customState\n        .slice(0, 8)\n        .equals(exports.ADMIN_CONTROLLED_POOL_TAG.toArrayLike(Buffer, 'le', 8));\n}\nexports.isAdminControlledPool = isAdminControlledPool;\n//# sourceMappingURL=admin-controlled-pool.js.map"]},"metadata":{},"sourceType":"script"}