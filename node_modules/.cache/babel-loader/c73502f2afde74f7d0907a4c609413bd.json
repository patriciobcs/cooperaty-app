{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPoolBasket = exports.loadPoolInfo = exports.isAdminControlledPool = exports.AdminControlledPoolInstructions = exports.PoolTransactions = exports.PoolInstructions = void 0;\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst schema_1 = require(\"./schema\");\n\nconst simulate_transaction_1 = require(\"./simulate-transaction\");\n\nconst transactions_1 = require(\"./transactions\");\n\n__exportStar(require(\"./schema\"), exports);\n\nvar instructions_1 = require(\"./instructions\");\n\nObject.defineProperty(exports, \"PoolInstructions\", {\n  enumerable: true,\n  get: function () {\n    return instructions_1.PoolInstructions;\n  }\n});\n\nvar transactions_2 = require(\"./transactions\");\n\nObject.defineProperty(exports, \"PoolTransactions\", {\n  enumerable: true,\n  get: function () {\n    return transactions_2.PoolTransactions;\n  }\n});\n\nvar admin_controlled_pool_1 = require(\"./admin-controlled-pool\");\n\nObject.defineProperty(exports, \"AdminControlledPoolInstructions\", {\n  enumerable: true,\n  get: function () {\n    return admin_controlled_pool_1.AdminControlledPoolInstructions;\n  }\n});\nObject.defineProperty(exports, \"isAdminControlledPool\", {\n  enumerable: true,\n  get: function () {\n    return admin_controlled_pool_1.isAdminControlledPool;\n  }\n});\n/**\n * Load and decode pool state.\n *\n * Throws an error if the pool is not found or invalid.\n *\n * @param connection Solana connection to use to fetch the pool state.\n * @param address Pool state account address.\n */\n\nasync function loadPoolInfo(connection, address) {\n  const accountInfo = await connection.getAccountInfo(address);\n\n  if (accountInfo === null) {\n    throw new Error('Pool does not exist');\n  }\n\n  if (!schema_1.isPoolState(accountInfo.data)) {\n    throw new Error('Address is not a valid pool');\n  }\n\n  return {\n    address,\n    state: schema_1.decodePoolState(accountInfo.data),\n    program: accountInfo.owner\n  };\n}\n\nexports.loadPoolInfo = loadPoolInfo;\n/**\n * Fetch the basket for a creation or redemption.\n *\n * For creations, the basket is the quantity of each asset that needs to be paid\n * to the pool to create the given quantity of pool tokens.\n *\n * For redemptions, the basket is the quantity of each asset that is received\n * from the pool in return for redeeming the given quantity of pool tokens.\n *\n * @param connection Connection to use to fetch data.\n * @param pool Pool to interact with.\n * @param action Creation, redemption, or swap.\n * @param payer Arbitrary Solana address. Must hold nonzero SOL and not be owned\n * by a program.\n */\n\nasync function getPoolBasket(connection, pool, action, payer = new web3_js_1.PublicKey('H6WR1VVoiwWz1GMSBALwUNNazvE7UhAZEjaYTTSwvV8D')) {\n  var _a;\n\n  const {\n    transaction\n  } = transactions_1.PoolTransactions.getBasket(pool, action, payer);\n  const {\n    value\n  } = await simulate_transaction_1.simulateTransaction(connection, transaction, (_a = connection.commitment) !== null && _a !== void 0 ? _a : 'single');\n\n  if (value.err) {\n    console.warn('Program logs:', value.logs);\n    throw new Error('Failed to get pool basket: ' + JSON.stringify(value.err));\n  }\n\n  if (value.logs) {\n    for (let i = value.logs.length - 1; i >= 0; --i) {\n      if (value.logs[i].startsWith('Program log: ')) {\n        const data = Buffer.from(value.logs[i].slice('Program log: '.length), 'base64');\n        return schema_1.Basket.decode(data);\n      }\n    }\n  }\n\n  throw new Error('Failed to find pool basket in logs');\n}\n\nexports.getPoolBasket = getPoolBasket;","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getPoolBasket = exports.loadPoolInfo = exports.isAdminControlledPool = exports.AdminControlledPoolInstructions = exports.PoolTransactions = exports.PoolInstructions = void 0;\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst schema_1 = require(\"./schema\");\nconst simulate_transaction_1 = require(\"./simulate-transaction\");\nconst transactions_1 = require(\"./transactions\");\n__exportStar(require(\"./schema\"), exports);\nvar instructions_1 = require(\"./instructions\");\nObject.defineProperty(exports, \"PoolInstructions\", { enumerable: true, get: function () { return instructions_1.PoolInstructions; } });\nvar transactions_2 = require(\"./transactions\");\nObject.defineProperty(exports, \"PoolTransactions\", { enumerable: true, get: function () { return transactions_2.PoolTransactions; } });\nvar admin_controlled_pool_1 = require(\"./admin-controlled-pool\");\nObject.defineProperty(exports, \"AdminControlledPoolInstructions\", { enumerable: true, get: function () { return admin_controlled_pool_1.AdminControlledPoolInstructions; } });\nObject.defineProperty(exports, \"isAdminControlledPool\", { enumerable: true, get: function () { return admin_controlled_pool_1.isAdminControlledPool; } });\n/**\n * Load and decode pool state.\n *\n * Throws an error if the pool is not found or invalid.\n *\n * @param connection Solana connection to use to fetch the pool state.\n * @param address Pool state account address.\n */\nasync function loadPoolInfo(connection, address) {\n    const accountInfo = await connection.getAccountInfo(address);\n    if (accountInfo === null) {\n        throw new Error('Pool does not exist');\n    }\n    if (!schema_1.isPoolState(accountInfo.data)) {\n        throw new Error('Address is not a valid pool');\n    }\n    return {\n        address,\n        state: schema_1.decodePoolState(accountInfo.data),\n        program: accountInfo.owner,\n    };\n}\nexports.loadPoolInfo = loadPoolInfo;\n/**\n * Fetch the basket for a creation or redemption.\n *\n * For creations, the basket is the quantity of each asset that needs to be paid\n * to the pool to create the given quantity of pool tokens.\n *\n * For redemptions, the basket is the quantity of each asset that is received\n * from the pool in return for redeeming the given quantity of pool tokens.\n *\n * @param connection Connection to use to fetch data.\n * @param pool Pool to interact with.\n * @param action Creation, redemption, or swap.\n * @param payer Arbitrary Solana address. Must hold nonzero SOL and not be owned\n * by a program.\n */\nasync function getPoolBasket(connection, pool, action, payer = new web3_js_1.PublicKey('H6WR1VVoiwWz1GMSBALwUNNazvE7UhAZEjaYTTSwvV8D')) {\n    var _a;\n    const { transaction } = transactions_1.PoolTransactions.getBasket(pool, action, payer);\n    const { value } = await simulate_transaction_1.simulateTransaction(connection, transaction, (_a = connection.commitment) !== null && _a !== void 0 ? _a : 'single');\n    if (value.err) {\n        console.warn('Program logs:', value.logs);\n        throw new Error('Failed to get pool basket: ' + JSON.stringify(value.err));\n    }\n    if (value.logs) {\n        for (let i = value.logs.length - 1; i >= 0; --i) {\n            if (value.logs[i].startsWith('Program log: ')) {\n                const data = Buffer.from(value.logs[i].slice('Program log: '.length), 'base64');\n                return schema_1.Basket.decode(data);\n            }\n        }\n    }\n    throw new Error('Failed to find pool basket in logs');\n}\nexports.getPoolBasket = getPoolBasket;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}