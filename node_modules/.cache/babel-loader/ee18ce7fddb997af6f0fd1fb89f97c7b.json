{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/pools/PoolPage/index.tsx\";\nimport React, { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Col, PageHeader, Row, Spin, Typography } from 'antd';\nimport { PublicKey } from '@solana/web3.js';\nimport { useAccountInfo } from '../../../utils/connection';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport { decodePoolState, isAdminControlledPool } from '@project-serum/pool';\nimport PoolInfoPanel from './PoolInfoPanel';\nimport { parseTokenMintData } from '../../../utils/tokens';\nimport PoolCreateRedeemPanel from './PoolCreateRedeemPanel';\nimport PoolBalancesPanel from './PoolBalancesPanel';\nimport { useHistory } from 'react-router-dom';\nimport { PoolAdminPanel } from './PoolAdminPanel';\nimport { useWallet } from '../../../utils/wallet';\nconst {\n  Text\n} = Typography;\nexport default function PoolPage() {\n  const {\n    poolAddress\n  } = useParams();\n  const [poolAccountInfo, poolAccountLoaded] = useAccountInfo(isPublicKey(poolAddress) ? new PublicKey(poolAddress) : null);\n  const history = useHistory();\n  const poolInfo = useMemo(() => {\n    if (!poolAccountInfo) {\n      return null;\n    }\n\n    try {\n      return {\n        address: new PublicKey(poolAddress),\n        state: decodePoolState(poolAccountInfo.data),\n        program: poolAccountInfo.owner\n      };\n    } catch (e) {\n      return null;\n    }\n  }, [poolAddress, poolAccountInfo]);\n  const [mintAccountInfo, mintAccountInfoLoaded] = useAccountInfo(poolInfo === null || poolInfo === void 0 ? void 0 : poolInfo.state.poolTokenMint);\n  const mintInfo = useMemo(() => mintAccountInfo ? parseTokenMintData(mintAccountInfo.data) : null, [mintAccountInfo]);\n  const {\n    wallet\n  } = useWallet();\n\n  if (poolInfo && mintInfo && wallet) {\n    var _poolInfo$state$admin;\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageHeader, {\n      title: /*#__PURE__*/React.createElement(React.Fragment, null, \"Pool \", poolInfo.address.toBase58()),\n      onBack: () => history.push('/pools'),\n      subTitle: poolInfo.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 24,\n      lg: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(PoolInfoPanel, {\n      poolInfo: poolInfo,\n      mintInfo: mintInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: 24,\n      lg: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(PoolCreateRedeemPanel, {\n      poolInfo: poolInfo,\n      mintInfo: mintInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(PoolBalancesPanel, {\n      poolInfo: poolInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    })), wallet.connected && ((_poolInfo$state$admin = poolInfo.state.adminKey) === null || _poolInfo$state$admin === void 0 ? void 0 : _poolInfo$state$admin.equals(wallet.publicKey)) && isAdminControlledPool(poolInfo) ? /*#__PURE__*/React.createElement(Col, {\n      xs: 24,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(PoolAdminPanel, {\n      poolInfo: poolInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    })) : null));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageHeader, {\n    title: /*#__PURE__*/React.createElement(React.Fragment, null, \"Pool \", poolAddress),\n    onBack: () => history.push('/pools'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FloatingElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, !poolAccountLoaded || !mintAccountInfoLoaded ? /*#__PURE__*/React.createElement(Spin, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Invalid pool\")));\n}\n\nfunction isPublicKey(address) {\n  try {\n    new PublicKey(address);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/pages/pools/PoolPage/index.tsx"],"names":["React","useMemo","useParams","Col","PageHeader","Row","Spin","Typography","PublicKey","useAccountInfo","FloatingElement","decodePoolState","isAdminControlledPool","PoolInfoPanel","parseTokenMintData","PoolCreateRedeemPanel","PoolBalancesPanel","useHistory","PoolAdminPanel","useWallet","Text","PoolPage","poolAddress","poolAccountInfo","poolAccountLoaded","isPublicKey","history","poolInfo","address","state","data","program","owner","e","mintAccountInfo","mintAccountInfoLoaded","poolTokenMint","mintInfo","wallet","toBase58","push","name","connected","adminKey","equals","publicKey"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,EAA+BC,IAA/B,EAAqCC,UAArC,QAAuD,MAAvD;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,SACEC,eADF,EAEEC,qBAFF,QAIO,qBAJP;AAKA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAWb,UAAjB;AAEA,eAAe,SAASc,QAAT,GAAoB;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAkBpB,SAAS,EAAjC;AACA,QAAM,CAACqB,eAAD,EAAkBC,iBAAlB,IAAuCf,cAAc,CACzDgB,WAAW,CAACH,WAAD,CAAX,GAA2B,IAAId,SAAJ,CAAcc,WAAd,CAA3B,GAAwD,IADC,CAA3D;AAGA,QAAMI,OAAO,GAAGT,UAAU,EAA1B;AAEA,QAAMU,QAAyB,GAAG1B,OAAO,CAAC,MAAM;AAC9C,QAAI,CAACsB,eAAL,EAAsB;AACpB,aAAO,IAAP;AACD;;AACD,QAAI;AACF,aAAO;AACLK,QAAAA,OAAO,EAAE,IAAIpB,SAAJ,CAAcc,WAAd,CADJ;AAELO,QAAAA,KAAK,EAAElB,eAAe,CAACY,eAAe,CAACO,IAAjB,CAFjB;AAGLC,QAAAA,OAAO,EAAER,eAAe,CAACS;AAHpB,OAAP;AAKD,KAND,CAME,OAAOC,CAAP,EAAU;AACV,aAAO,IAAP;AACD;AACF,GAbwC,EAatC,CAACX,WAAD,EAAcC,eAAd,CAbsC,CAAzC;AAcA,QAAM,CAACW,eAAD,EAAkBC,qBAAlB,IAA2C1B,cAAc,CAC7DkB,QAD6D,aAC7DA,QAD6D,uBAC7DA,QAAQ,CAAEE,KAAV,CAAgBO,aAD6C,CAA/D;AAGA,QAAMC,QAAQ,GAAGpC,OAAO,CACtB,MAAOiC,eAAe,GAAGpB,kBAAkB,CAACoB,eAAe,CAACJ,IAAjB,CAArB,GAA8C,IAD9C,EAEtB,CAACI,eAAD,CAFsB,CAAxB;AAIA,QAAM;AAAEI,IAAAA;AAAF,MAAanB,SAAS,EAA5B;;AAEA,MAAIQ,QAAQ,IAAIU,QAAZ,IAAwBC,MAA5B,EAAoC;AAAA;;AAClC,wBACE,uDACE,oBAAC,UAAD;AACE,MAAA,KAAK,eAAE,mDAAQX,QAAQ,CAACC,OAAT,CAAiBW,QAAjB,EAAR,CADT;AAEE,MAAA,MAAM,EAAE,MAAMb,OAAO,CAACc,IAAR,CAAa,QAAb,CAFhB;AAGE,MAAA,QAAQ,EAAEb,QAAQ,CAACE,KAAT,CAAeY,IAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAME,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,EAAE,EAAE,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,aAAD;AAAe,MAAA,QAAQ,EAAEd,QAAzB;AAAmC,MAAA,QAAQ,EAAEU,QAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAIE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,EAAE,EAAE,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,qBAAD;AAAuB,MAAA,QAAQ,EAAEV,QAAjC;AAA2C,MAAA,QAAQ,EAAEU,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,eAOE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,iBAAD;AAAmB,MAAA,QAAQ,EAAEV,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAPF,EAUGW,MAAM,CAACI,SAAP,8BACDf,QAAQ,CAACE,KAAT,CAAec,QADd,0DACD,sBAAyBC,MAAzB,CAAgCN,MAAM,CAACO,SAAvC,CADC,KAEDjC,qBAAqB,CAACe,QAAD,CAFpB,gBAGC,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEA,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHD,GAMG,IAhBN,CANF,CADF;AA2BD;;AAED,sBACE,uDACE,oBAAC,UAAD;AACE,IAAA,KAAK,eAAE,mDAAQL,WAAR,CADT;AAEE,IAAA,MAAM,EAAE,MAAMI,OAAO,CAACc,IAAR,CAAa,QAAb,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAChB,iBAAD,IAAsB,CAACW,qBAAvB,gBACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,gBAGC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ,CALF,CADF;AAeD;;AAED,SAASV,WAAT,CAAqBG,OAArB,EAA8B;AAC5B,MAAI;AACF,QAAIpB,SAAJ,CAAcoB,OAAd;AACA,WAAO,IAAP;AACD,GAHD,CAGE,OAAOK,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF","sourcesContent":["import React, { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Col, PageHeader, Row, Spin, Typography } from 'antd';\nimport { PublicKey } from '@solana/web3.js';\nimport { useAccountInfo } from '../../../utils/connection';\nimport FloatingElement from '../../../components/layout/FloatingElement';\nimport {\n  decodePoolState,\n  isAdminControlledPool,\n  PoolInfo,\n} from '@project-serum/pool';\nimport PoolInfoPanel from './PoolInfoPanel';\nimport { parseTokenMintData } from '../../../utils/tokens';\nimport PoolCreateRedeemPanel from './PoolCreateRedeemPanel';\nimport PoolBalancesPanel from './PoolBalancesPanel';\nimport { useHistory } from 'react-router-dom';\nimport { PoolAdminPanel } from './PoolAdminPanel';\nimport { useWallet } from '../../../utils/wallet';\n\nconst { Text } = Typography;\n\nexport default function PoolPage() {\n  const { poolAddress } = useParams();\n  const [poolAccountInfo, poolAccountLoaded] = useAccountInfo(\n    isPublicKey(poolAddress) ? new PublicKey(poolAddress) : null,\n  );\n  const history = useHistory();\n\n  const poolInfo: PoolInfo | null = useMemo(() => {\n    if (!poolAccountInfo) {\n      return null;\n    }\n    try {\n      return {\n        address: new PublicKey(poolAddress),\n        state: decodePoolState(poolAccountInfo.data),\n        program: poolAccountInfo.owner,\n      };\n    } catch (e) {\n      return null;\n    }\n  }, [poolAddress, poolAccountInfo]);\n  const [mintAccountInfo, mintAccountInfoLoaded] = useAccountInfo(\n    poolInfo?.state.poolTokenMint,\n  );\n  const mintInfo = useMemo(\n    () => (mintAccountInfo ? parseTokenMintData(mintAccountInfo.data) : null),\n    [mintAccountInfo],\n  );\n  const { wallet } = useWallet();\n\n  if (poolInfo && mintInfo && wallet) {\n    return (\n      <>\n        <PageHeader\n          title={<>Pool {poolInfo.address.toBase58()}</>}\n          onBack={() => history.push('/pools')}\n          subTitle={poolInfo.state.name}\n        />\n        <Row>\n          <Col xs={24} lg={12}>\n            <PoolInfoPanel poolInfo={poolInfo} mintInfo={mintInfo} />\n          </Col>\n          <Col xs={24} lg={12}>\n            <PoolCreateRedeemPanel poolInfo={poolInfo} mintInfo={mintInfo} />\n          </Col>\n          <Col xs={24}>\n            <PoolBalancesPanel poolInfo={poolInfo} />\n          </Col>\n          {wallet.connected &&\n          poolInfo.state.adminKey?.equals(wallet.publicKey) &&\n          isAdminControlledPool(poolInfo) ? (\n            <Col xs={24}>\n              <PoolAdminPanel poolInfo={poolInfo} />\n            </Col>\n          ) : null}\n        </Row>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <PageHeader\n        title={<>Pool {poolAddress}</>}\n        onBack={() => history.push('/pools')}\n      />\n      <FloatingElement>\n        {!poolAccountLoaded || !mintAccountInfoLoaded ? (\n          <Spin />\n        ) : (\n          <Text>Invalid pool</Text>\n        )}\n      </FloatingElement>\n    </>\n  );\n}\n\nfunction isPublicKey(address) {\n  try {\n    new PublicKey(address);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}