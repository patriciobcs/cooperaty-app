{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/utils/preferences.tsx\";\nimport React, { useContext, useState } from 'react';\nimport { sleep, useLocalStorageState } from './utils';\nimport { useInterval } from './useInterval';\nimport { useConnection } from './connection';\nimport { useWallet } from './wallet';\nimport { useMarketInfos, useTokenAccounts } from './markets';\nimport { settleAllFunds } from './send';\nimport { Market } from \"@project-serum/serum\";\nexport const AUTO_SETTLE_DISABLED_OVERRIDE = true;\nconst PreferencesContext = React.createContext(null);\nexport function PreferencesProvider({\n  children\n}) {\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState('autoSettleEnabled', true);\n  const [tokenAccounts] = useTokenAccounts();\n  const {\n    connected,\n    wallet\n  } = useWallet();\n  const marketInfoList = useMarketInfos();\n  const [currentlyFetchingMarkets, setCurrentlyFetchingMarkets] = useState(false);\n  const [markets, setMarkets] = useState(new Map());\n\n  const addToMarketsMap = (marketId, market) => {\n    setMarkets(prev => new Map(prev).set(marketId, market));\n  };\n\n  const connection = useConnection();\n  useInterval(() => {\n    const autoSettle = async () => {\n      if (AUTO_SETTLE_DISABLED_OVERRIDE) {\n        return;\n      }\n\n      if (!wallet) {\n        return;\n      }\n\n      try {\n        console.log('Settling funds...');\n        await settleAllFunds({\n          connection,\n          wallet,\n          tokenAccounts: tokenAccounts || [],\n          markets: [...markets.values()]\n        });\n      } catch (e) {\n        console.log('Error auto settling funds: ' + e.message);\n        return;\n      }\n\n      console.log('Finished settling funds.');\n    };\n\n    connected && (wallet === null || wallet === void 0 ? void 0 : wallet.autoApprove) && autoSettleEnabled && autoSettle();\n  }, 20000); // warms up the market and open orders cache for auto-settlement\n\n  useInterval(() => {\n    const fetchMarkets = async () => {\n      if (!wallet) {\n        // only need these markets for auto-settlement, so don't fetch unless we are connected.\n        return;\n      }\n\n      setCurrentlyFetchingMarkets(true);\n\n      for (const marketInfo of marketInfoList) {\n        if (markets.has(marketInfo.address.toString())) {\n          continue;\n        }\n\n        try {\n          const market = await Market.load(connection, marketInfo.address, {}, marketInfo.programId);\n          addToMarketsMap(marketInfo.address.toString(), market);\n          await sleep(1000);\n        } catch (e) {\n          console.log('Error fetching market: ' + e.message);\n        }\n      }\n\n      setCurrentlyFetchingMarkets(false);\n    };\n\n    connected && (wallet === null || wallet === void 0 ? void 0 : wallet.autoApprove) && autoSettleEnabled && !currentlyFetchingMarkets && fetchMarkets();\n  }, 60000);\n  return /*#__PURE__*/React.createElement(PreferencesContext.Provider, {\n    value: {\n      autoSettleEnabled,\n      setAutoSettleEnabled\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, children);\n}\nexport function usePreferences() {\n  const context = useContext(PreferencesContext);\n\n  if (!context) {\n    throw new Error('Missing preferences context');\n  }\n\n  return {\n    autoSettleEnabled: context.autoSettleEnabled,\n    setAutoSettleEnabled: context.setAutoSettleEnabled\n  };\n}","map":{"version":3,"sources":["/mnt/c/Users/Gianni/Desktop/serum-dex-ui/src/utils/preferences.tsx"],"names":["React","useContext","useState","sleep","useLocalStorageState","useInterval","useConnection","useWallet","useMarketInfos","useTokenAccounts","settleAllFunds","Market","AUTO_SETTLE_DISABLED_OVERRIDE","PreferencesContext","createContext","PreferencesProvider","children","autoSettleEnabled","setAutoSettleEnabled","tokenAccounts","connected","wallet","marketInfoList","currentlyFetchingMarkets","setCurrentlyFetchingMarkets","markets","setMarkets","Map","addToMarketsMap","marketId","market","prev","set","connection","autoSettle","console","log","values","e","message","autoApprove","fetchMarkets","marketInfo","has","address","toString","load","programId","usePreferences","context","Error"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\nimport {sleep, useLocalStorageState} from './utils';\nimport {useInterval} from './useInterval';\nimport {useConnection} from './connection';\nimport {useWallet} from './wallet';\nimport {\n  useMarketInfos,\n  useTokenAccounts,\n} from './markets';\nimport {settleAllFunds} from './send';\nimport {PreferencesContextValues} from './types';\nimport {Market} from \"@project-serum/serum\";\n\nexport const AUTO_SETTLE_DISABLED_OVERRIDE = true;\n\nconst PreferencesContext = React.createContext<PreferencesContextValues | null>(\n  null,\n);\n\nexport function PreferencesProvider({ children }) {\n  const [autoSettleEnabled, setAutoSettleEnabled] = useLocalStorageState(\n    'autoSettleEnabled',\n    true,\n  );\n\n  const [tokenAccounts] = useTokenAccounts();\n  const { connected, wallet } = useWallet();\n  const marketInfoList = useMarketInfos();\n  const [currentlyFetchingMarkets, setCurrentlyFetchingMarkets] = useState<boolean>(false);\n  const [markets, setMarkets] = useState<Map<string, Market>>(new Map())\n  const addToMarketsMap = (marketId, market) => {\n    setMarkets(prev => new Map(prev).set(marketId, market));\n  }\n  const connection = useConnection();\n\n  useInterval(() => {\n    const autoSettle = async () => {\n\t\t\tif (AUTO_SETTLE_DISABLED_OVERRIDE) {\n\t\t\t\treturn;\n\t\t\t}\n      if (!wallet) {\n        return;\n      }\n      try {\n        console.log('Settling funds...');\n        await settleAllFunds({\n          connection,\n          wallet,\n          tokenAccounts: tokenAccounts || [],\n          markets: [...markets.values()],\n        });\n      } catch (e) {\n        console.log('Error auto settling funds: ' + e.message);\n        return;\n      }\n      console.log('Finished settling funds.');\n    };\n    (\n      connected &&\n      wallet?.autoApprove &&\n      autoSettleEnabled &&\n      autoSettle()\n    );\n  }, 20000);\n\n  // warms up the market and open orders cache for auto-settlement\n  useInterval(() => {\n    const fetchMarkets = async () => {\n      if (!wallet) {\n        // only need these markets for auto-settlement, so don't fetch unless we are connected.\n        return;\n      }\n      setCurrentlyFetchingMarkets(true);\n      for (const marketInfo of marketInfoList) {\n        if (markets.has(marketInfo.address.toString())) {\n          continue;\n        }\n        try {\n          const market = await Market.load(connection, marketInfo.address, {}, marketInfo.programId)\n          addToMarketsMap(marketInfo.address.toString(), market);\n          await sleep(1000);\n        } catch (e) {\n          console.log('Error fetching market: ' + e.message);\n        }\n      }\n      setCurrentlyFetchingMarkets(false);\n    }\n    (\n      connected &&\n      wallet?.autoApprove &&\n      autoSettleEnabled &&\n      !currentlyFetchingMarkets &&\n      fetchMarkets()\n    );\n  }, 60000)\n\n  return (\n    <PreferencesContext.Provider\n      value={{\n        autoSettleEnabled,\n        setAutoSettleEnabled,\n      }}\n    >\n      {children}\n    </PreferencesContext.Provider>\n  );\n}\n\nexport function usePreferences() {\n  const context = useContext(PreferencesContext);\n  if (!context) {\n    throw new Error('Missing preferences context');\n  }\n  return {\n    autoSettleEnabled: context.autoSettleEnabled,\n    setAutoSettleEnabled: context.setAutoSettleEnabled,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}