import { Connection, PublicKey } from '@solana/web3.js';
import { Basket, PoolAction } from './schema';
import { PoolInfo } from './instructions';
export * from './schema';
export { PoolInstructions, PoolInfo, UserInfo } from './instructions';
export { PoolTransactions, TransactionAndSigners, SimplePoolParams, } from './transactions';
export { AdminControlledPoolInstructions, isAdminControlledPool, } from './admin-controlled-pool';
/**
 * Load and decode pool state.
 *
 * Throws an error if the pool is not found or invalid.
 *
 * @param connection Solana connection to use to fetch the pool state.
 * @param address Pool state account address.
 */
export declare function loadPoolInfo(connection: Connection, address: PublicKey): Promise<PoolInfo>;
/**
 * Fetch the basket for a creation or redemption.
 *
 * For creations, the basket is the quantity of each asset that needs to be paid
 * to the pool to create the given quantity of pool tokens.
 *
 * For redemptions, the basket is the quantity of each asset that is received
 * from the pool in return for redeeming the given quantity of pool tokens.
 *
 * @param connection Connection to use to fetch data.
 * @param pool Pool to interact with.
 * @param action Creation, redemption, or swap.
 * @param payer Arbitrary Solana address. Must hold nonzero SOL and not be owned
 * by a program.
 */
export declare function getPoolBasket(connection: Connection, pool: PoolInfo, action: PoolAction, payer?: PublicKey): Promise<Basket>;
//# sourceMappingURL=index.d.ts.map