"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAdminControlledPool = exports.ADMIN_CONTROLLED_POOL_TAG = exports.AdminControlledPoolInstructions = exports.AdminRequest = exports.ADMIN_INSTRUCTION_TAG = void 0;
const buffer_layout_1 = require("buffer-layout");
const borsh_1 = require("@project-serum/borsh");
const web3_js_1 = require("@solana/web3.js");
const bn_js_1 = __importDefault(require("bn.js"));
const token_instructions_1 = require("@project-serum/serum/lib/token-instructions");
exports.ADMIN_INSTRUCTION_TAG = new bn_js_1.default('31e6452361a17878', 'hex');
exports.AdminRequest = borsh_1.tagged(exports.ADMIN_INSTRUCTION_TAG, borsh_1.rustEnum([
    buffer_layout_1.struct([], 'pause'),
    buffer_layout_1.struct([], 'unpause'),
    buffer_layout_1.struct([borsh_1.u64('amount')], 'approveDelegate'),
    buffer_layout_1.struct([], 'addAsset'),
    buffer_layout_1.struct([], 'removeAsset'),
    buffer_layout_1.struct([buffer_layout_1.u32('feeRate')], 'updateFee'),
    buffer_layout_1.struct([], 'updateAdmin'),
]));
function encodeAdminRequest(request) {
    const buffer = Buffer.alloc(1000);
    const len = exports.AdminRequest.encode(request, buffer);
    return buffer.slice(0, len);
}
function makeAdminInstruction(pool, request, keys) {
    if (!pool.state.adminKey) {
        throw new Error('Pool does not have admin');
    }
    return new web3_js_1.TransactionInstruction({
        keys: [
            { pubkey: pool.address, isSigner: false, isWritable: true },
            { pubkey: pool.state.adminKey, isSigner: true, isWritable: false },
            ...(keys !== null && keys !== void 0 ? keys : []),
        ],
        programId: pool.program,
        data: encodeAdminRequest(request),
    });
}
/** Instructions for interacting with the example admin-controlled pool. */
class AdminControlledPoolInstructions {
    /** Pauses creations and redemptions for the pool. */
    static pause(pool) {
        return makeAdminInstruction(pool, { pause: {} });
    }
    /**
     * Resumes creations and redemptions for the pool.
     *
     * Pool assets must not have any outstanding delegates.
     */
    static unpause(pool) {
        return makeAdminInstruction(pool, { unpause: {} }, pool.state.assets.map(asset => ({
            pubkey: asset.vaultAddress,
            isSigner: false,
            isWritable: false,
        })));
    }
    /** Approves an account to spend tokens on behalf of the pool. */
    static approveDelegate(pool, vault, delegate, amount) {
        return makeAdminInstruction(pool, { approveDelegate: { amount } }, [
            { pubkey: vault, isSigner: false, isWritable: true },
            { pubkey: delegate, isSigner: false, isWritable: false },
            { pubkey: pool.state.vaultSigner, isSigner: false, isWritable: false },
            { pubkey: token_instructions_1.TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },
        ]);
    }
    /** Adds a new asset to the pool. */
    static addAsset(pool, vault) {
        return makeAdminInstruction(pool, { addAsset: {} }, [
            { pubkey: vault, isSigner: false, isWritable: false },
        ]);
    }
    /**
     * Removes an asset from the pool.
     *
     * The pool must not currently own any tokens of the asset to be removed.
     */
    static removeAsset(pool, vault) {
        return makeAdminInstruction(pool, { removeAsset: {} }, [
            { pubkey: vault, isSigner: false, isWritable: false },
        ]);
    }
    /** Modifies the fee rate for the pool. */
    static updateFee(pool, feeRate) {
        return makeAdminInstruction(pool, { updateFee: { feeRate } });
    }
    /** Transfers admin permission for the pool to a new account. */
    static updateAdmin(pool, newAdmin) {
        return makeAdminInstruction(pool, { updateAdmin: {} }, [
            { pubkey: newAdmin, isSigner: true, isWritable: false },
        ]);
    }
}
exports.AdminControlledPoolInstructions = AdminControlledPoolInstructions;
exports.ADMIN_CONTROLLED_POOL_TAG = new bn_js_1.default('4a3ab7f76f93f94e', 'hex');
function isAdminControlledPool(pool) {
    return pool.state.customState
        .slice(0, 8)
        .equals(exports.ADMIN_CONTROLLED_POOL_TAG.toArrayLike(Buffer, 'le', 8));
}
exports.isAdminControlledPool = isAdminControlledPool;
//# sourceMappingURL=admin-controlled-pool.js.map