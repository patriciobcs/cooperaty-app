/// <reference types="node" />
import { AccountMeta, PublicKey, TransactionInstruction } from '@solana/web3.js';
import { PoolAction, PoolState } from './schema';
export interface PoolInfo {
    address: PublicKey;
    state: PoolState;
    program: PublicKey;
}
export interface UserInfo {
    /**  spl-token account for the {@link PoolState.poolTokenMint pool token}. */
    poolTokenAccount: PublicKey;
    /**
     *  spl-token account for each of the {@link PoolState.assets assets} in the
     *  pool.
     */
    assetAccounts: PublicKey[];
    /**
     *  Owner or delegate of the token accounts.
     */
    owner: PublicKey;
    /**
     * Optional spl-token account to which referral fees should be sent.
     */
    referrer?: PublicKey;
}
export declare const RETBUF_PROGRAM_ID: PublicKey;
export declare const LQD_FEE_OWNER_ADDRESS: PublicKey;
/**
 * Low-level API for constructing and encoding pool instructions.
 *
 * For a higher-level API that handles initializing accounts and approving token
 * transfers, use {@link PoolTransactions}.
 */
export declare class PoolInstructions {
    /**
     * Instruction to initialize a pool.
     *
     * @param poolProgram Program ID of the pool program.
     * @param poolAccount Newly-created account to hold the pool state. Must be
     * owned by the pool program.
     * @param poolTokenMint spl-token mint address for the pool token.
     * @param poolName User-friendly name for the pool.
     * @param vaults spl-token account for each of the assets in the pool.
     * @param vaultSigner Mint authority for `poolTokenMint` and owner of
     * `poolTokenMint`.
     * @param vaultSignerNonce Nonce used to generate `vaultSigner`.
     * @param lqdFeeAccount Pool token spl-token account owned by the LQD fee owner.
     * @param initializerFeeAccount Pool token spl-token account owned by the pool initializer.
     * @param feeRate Fee rate for creations/redemptions times 10^6.
     * @param additionalAccounts Any custom pool-specific accounts needed to
     * initialize the pool.
     * @param customData Any custom pool-specific data needed to initialize the pool
     */
    static initialize(poolProgram: PublicKey, poolAccount: PublicKey, poolTokenMint: PublicKey, poolName: string, vaults: PublicKey[], vaultSigner: PublicKey, vaultSignerNonce: number, lqdFeeAccount: PublicKey, initializerFeeAccount: PublicKey, feeRate: number, additionalAccounts?: AccountMeta[], customData?: Buffer): TransactionInstruction;
    /**
     * Instruction to get the expected basket for a {@link PoolAction}.
     *
     * For creations, the basket is the quantity of each asset
     * that need to be sent to the pool to process the creation.  For redemptions
     * and swaps, the basket is the quantity of each asset that will be
     * transferred from the pool to the user after the redemption or swap.
     *
     * Negative quantities will cause tokens to be transferred in the opposite
     * direction.
     *
     * @param pool
     * @param action Creation, redemption, or swap.
     * @param retbufAccount Account to which the basket will be written. Must be
     * owned by the retbuf program.
     */
    static getBasket(pool: PoolInfo, action: PoolAction, retbufAccount: PublicKey): TransactionInstruction;
    /**
     * Instruction to execute a creation, redemption, or swap.
     *
     * @param pool
     * @param action Creation, redemption, or swap.
     * @param user Token accounts to pull funds from or send funds to.
     */
    static execute(pool: PoolInfo, action: PoolAction, user: UserInfo): TransactionInstruction;
}
//# sourceMappingURL=instructions.d.ts.map