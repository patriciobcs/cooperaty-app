import { PoolInfo, UserInfo } from './instructions';
import { Account, AccountMeta, Connection, PublicKey, Transaction } from '@solana/web3.js';
import { Basket, PoolAction } from './schema';
import BN from 'bn.js';
export interface TransactionAndSigners {
    transaction: Transaction;
    /**
     * Auto-generated accounts that need to sign the transaction. Note that this does not include
     * the user (fee payer and spl-token owner) account.
     */
    signers: Account[];
}
export interface SimplePoolParams {
    /** Connection to use to fetch fees. */
    connection: Connection;
    /** Program ID of the pool program. */
    programId: PublicKey;
    /** Size of pool state account, in bytes. */
    poolStateSpace: number;
    /** User-friendly name for the pool. */
    poolName: string;
    /**
     * Number of decimals for the to-be-created pool token.
     *
     * Defaults to 6.
     */
    poolMintDecimals?: number;
    /** Mint addresses for the tokens in the pool. */
    assetMints: PublicKey[];
    /**
     * Initial quantity of outstanding tokens, sent to the pool creator.
     *
     * Defaults to `10 ** poolMintDecimals`.
     */
    initialPoolMintSupply?: BN;
    /** Initial quantities of assets in the pool, sent from the pool creator. */
    initialAssetQuantities: BN[];
    /**
     * Owner for the spl-token accounts from which the initial pool assets are
     * taken and to which the newly created pool tokens are sent.
     */
    creator: PublicKey;
    /** Spl-token accounts from which the initial pool assets are taken. */
    creatorAssets: PublicKey[];
    /** Fee rate for creations and redemptions, times 10 ** 6. */
    feeRate?: number;
    /** Any additional accounts needed to initalize the pool. */
    additionalAccounts?: AccountMeta[];
}
/**
 * High-level API for constructing transactions to interact with pools.
 *
 * For a lower-level API, see {@link PoolInstructions}.
 */
export declare class PoolTransactions {
    /**
     * Transaction to initialize a simple pool.
     *
     * This will:
     * - initialize a new pool token mint
     * - initialize a pool token account for the creator and mint some tokens to it
     * - initialize vault accounts for each of the pool assets
     * - transfer assets from the pool creator to the vault accounts
     * - initialize the pool
     */
    static initializeSimplePool(params: SimplePoolParams): Promise<[PublicKey, TransactionAndSigners[]]>;
    /**
     * Transaction to get a pool basket, for use with simulateTransaction.
     *
     * This is a wrapper around {@link PoolInstructions.getBasket} that handles
     * initializing the retbuf account.
     *
     * @param pool Pool to interact with.
     * @param action Creation, redemption, or swap.
     * @param payer Payer for fees. Must have nonzero SOL but will not be charged
     * if the transaction is only simulated.
     */
    static getBasket(pool: PoolInfo, action: PoolAction, payer: PublicKey): TransactionAndSigners;
    /**
     * Transaction to execute a creation, redemption, or swap.
     *
     * This is a wrapper around {@link PoolInstructions.execute} that handles
     * token delegation.
     *
     * The transaction will create a temporary account, delegate tokens to it,
     * and use it in place of the actual owner, to limit the quantity of tokens
     * that the pool can pull from the user's accounts.
     *
     * @param pool Pool to interact with.
     * @param action Creation, redemption, or swap.
     * @param user Token accounts to pull funds from or send funds to.
     * @param expectedBasket Expected basket. Used to determine the quantity of
     * tokens to approve.
     */
    static execute(pool: PoolInfo, action: PoolAction, user: UserInfo, expectedBasket: Basket): TransactionAndSigners;
}
//# sourceMappingURL=transactions.d.ts.map