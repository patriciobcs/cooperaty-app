import { Layout } from '@project-serum/borsh';
import { PublicKey, TransactionInstruction } from '@solana/web3.js';
import BN from 'bn.js';
import { PoolInfo } from './instructions';
export declare type AdminRequest = {
    pause: any;
} | {
    unpause: any;
} | {
    approveDelegate: {
        amount: BN;
    };
} | {
    addAsset: any;
} | {
    removeAsset: any;
} | {
    updateFee: {
        feeRate: number;
    };
} | {
    updateAdmin: any;
};
export declare const ADMIN_INSTRUCTION_TAG: BN;
export declare const AdminRequest: Layout<AdminRequest>;
/** Instructions for interacting with the example admin-controlled pool. */
export declare class AdminControlledPoolInstructions {
    /** Pauses creations and redemptions for the pool. */
    static pause(pool: PoolInfo): TransactionInstruction;
    /**
     * Resumes creations and redemptions for the pool.
     *
     * Pool assets must not have any outstanding delegates.
     */
    static unpause(pool: PoolInfo): TransactionInstruction;
    /** Approves an account to spend tokens on behalf of the pool. */
    static approveDelegate(pool: PoolInfo, vault: PublicKey, delegate: PublicKey, amount: BN): TransactionInstruction;
    /** Adds a new asset to the pool. */
    static addAsset(pool: PoolInfo, vault: PublicKey): TransactionInstruction;
    /**
     * Removes an asset from the pool.
     *
     * The pool must not currently own any tokens of the asset to be removed.
     */
    static removeAsset(pool: PoolInfo, vault: PublicKey): TransactionInstruction;
    /** Modifies the fee rate for the pool. */
    static updateFee(pool: PoolInfo, feeRate: number): TransactionInstruction;
    /** Transfers admin permission for the pool to a new account. */
    static updateAdmin(pool: PoolInfo, newAdmin: PublicKey): TransactionInstruction;
}
export declare const ADMIN_CONTROLLED_POOL_TAG: BN;
export declare function isAdminControlledPool(pool: PoolInfo): boolean;
//# sourceMappingURL=admin-controlled-pool.d.ts.map