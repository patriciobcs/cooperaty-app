"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPoolBasket = exports.loadPoolInfo = exports.isAdminControlledPool = exports.AdminControlledPoolInstructions = exports.PoolTransactions = exports.PoolInstructions = void 0;
const web3_js_1 = require("@solana/web3.js");
const schema_1 = require("./schema");
const simulate_transaction_1 = require("./simulate-transaction");
const transactions_1 = require("./transactions");
__exportStar(require("./schema"), exports);
var instructions_1 = require("./instructions");
Object.defineProperty(exports, "PoolInstructions", { enumerable: true, get: function () { return instructions_1.PoolInstructions; } });
var transactions_2 = require("./transactions");
Object.defineProperty(exports, "PoolTransactions", { enumerable: true, get: function () { return transactions_2.PoolTransactions; } });
var admin_controlled_pool_1 = require("./admin-controlled-pool");
Object.defineProperty(exports, "AdminControlledPoolInstructions", { enumerable: true, get: function () { return admin_controlled_pool_1.AdminControlledPoolInstructions; } });
Object.defineProperty(exports, "isAdminControlledPool", { enumerable: true, get: function () { return admin_controlled_pool_1.isAdminControlledPool; } });
/**
 * Load and decode pool state.
 *
 * Throws an error if the pool is not found or invalid.
 *
 * @param connection Solana connection to use to fetch the pool state.
 * @param address Pool state account address.
 */
async function loadPoolInfo(connection, address) {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo === null) {
        throw new Error('Pool does not exist');
    }
    if (!schema_1.isPoolState(accountInfo.data)) {
        throw new Error('Address is not a valid pool');
    }
    return {
        address,
        state: schema_1.decodePoolState(accountInfo.data),
        program: accountInfo.owner,
    };
}
exports.loadPoolInfo = loadPoolInfo;
/**
 * Fetch the basket for a creation or redemption.
 *
 * For creations, the basket is the quantity of each asset that needs to be paid
 * to the pool to create the given quantity of pool tokens.
 *
 * For redemptions, the basket is the quantity of each asset that is received
 * from the pool in return for redeeming the given quantity of pool tokens.
 *
 * @param connection Connection to use to fetch data.
 * @param pool Pool to interact with.
 * @param action Creation, redemption, or swap.
 * @param payer Arbitrary Solana address. Must hold nonzero SOL and not be owned
 * by a program.
 */
async function getPoolBasket(connection, pool, action, payer = new web3_js_1.PublicKey('H6WR1VVoiwWz1GMSBALwUNNazvE7UhAZEjaYTTSwvV8D')) {
    var _a;
    const { transaction } = transactions_1.PoolTransactions.getBasket(pool, action, payer);
    const { value } = await simulate_transaction_1.simulateTransaction(connection, transaction, (_a = connection.commitment) !== null && _a !== void 0 ? _a : 'single');
    if (value.err) {
        console.warn('Program logs:', value.logs);
        throw new Error('Failed to get pool basket: ' + JSON.stringify(value.err));
    }
    if (value.logs) {
        for (let i = value.logs.length - 1; i >= 0; --i) {
            if (value.logs[i].startsWith('Program log: ')) {
                const data = Buffer.from(value.logs[i].slice('Program log: '.length), 'base64');
                return schema_1.Basket.decode(data);
            }
        }
    }
    throw new Error('Failed to find pool basket in logs');
}
exports.getPoolBasket = getPoolBasket;
//# sourceMappingURL=index.js.map