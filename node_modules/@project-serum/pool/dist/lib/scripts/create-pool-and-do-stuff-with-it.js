"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const serum_1 = require("@project-serum/serum");
const util_1 = require("util");
const os_1 = require("os");
const fs_1 = require("fs");
const bn_js_1 = __importDefault(require("bn.js"));
const transactions_1 = require("../transactions");
const index_1 = require("../index");
const associated_token_1 = require("@project-serum/associated-token");
const POOL_PROGRAM_ID = new web3_js_1.PublicKey('ERvQUuLLY89DcwiUYemUgogdt2TFh7CG7cNW1fEFzeMJ');
async function doStuff() {
    const connection = new web3_js_1.Connection('http://localhost:8899', 'recent');
    const payer = new web3_js_1.Account(Buffer.from(JSON.parse(await util_1.promisify(fs_1.readFile)(os_1.homedir() + '/.config/solana/id.json', {
        encoding: 'utf-8',
    }))));
    const [mint1, vault1] = await createMint(connection, payer);
    const [mint2, vault2] = await createMint(connection, payer);
    const [poolAddress, transactions,] = await transactions_1.PoolTransactions.initializeSimplePool({
        connection,
        assetMints: [mint1, mint2],
        creator: payer.publicKey,
        creatorAssets: [vault1, vault2],
        initialAssetQuantities: [new bn_js_1.default(100), new bn_js_1.default(300)],
        poolStateSpace: 1000,
        programId: POOL_PROGRAM_ID,
        poolName: 'Test Pool',
        feeRate: 2500,
    });
    console.log('Pool address:', poolAddress.toBase58());
    for (const { transaction, signers } of transactions) {
        await sendAndConfirmTransaction(connection, transaction, [
            payer,
            ...signers,
        ]);
    }
    const poolInfo = await index_1.loadPoolInfo(connection, poolAddress);
    console.log(poolInfo);
    const userInfo = {
        owner: payer.publicKey,
        poolTokenAccount: await associated_token_1.getAssociatedTokenAddress(payer.publicKey, poolInfo.state.poolTokenMint),
        assetAccounts: [vault1, vault2],
    };
    console.log(await index_1.getPoolBasket(connection, poolInfo, { create: new bn_js_1.default(1) }, payer.publicKey));
    console.log(await index_1.getPoolBasket(connection, poolInfo, { redeem: new bn_js_1.default(1) }, payer.publicKey));
    console.log(await index_1.getPoolBasket(connection, poolInfo, { create: new bn_js_1.default(1000000) }, payer.publicKey));
    console.log(await index_1.getPoolBasket(connection, poolInfo, { create: new bn_js_1.default(2000000) }, payer.publicKey));
    console.log(await index_1.getPoolBasket(connection, poolInfo, { redeem: new bn_js_1.default(2000000) }, payer.publicKey));
    {
        const { transaction, signers } = transactions_1.PoolTransactions.execute(poolInfo, { create: new bn_js_1.default(1000000) }, userInfo, {
            quantities: [new bn_js_1.default(100), new bn_js_1.default(300)],
        });
        await sendAndConfirmTransaction(connection, transaction, [
            payer,
            ...signers,
        ]);
    }
    console.log(await index_1.getPoolBasket(connection, poolInfo, { create: new bn_js_1.default(1000000) }, payer.publicKey));
    {
        const { transaction, signers } = transactions_1.PoolTransactions.execute(poolInfo, { redeem: new bn_js_1.default(2000000 - poolInfo.state.feeRate) }, userInfo, {
            quantities: [new bn_js_1.default(200), new bn_js_1.default(600)],
        });
        await sendAndConfirmTransaction(connection, transaction, [
            payer,
            ...signers,
        ]);
    }
    console.log(await index_1.getPoolBasket(connection, poolInfo, { create: new bn_js_1.default(1000000) }, payer.publicKey));
}
async function createMint(connection, payer) {
    const mint = new web3_js_1.Account();
    const vault = new web3_js_1.Account();
    const txn = new web3_js_1.Transaction();
    txn.add(web3_js_1.SystemProgram.createAccount({
        fromPubkey: payer.publicKey,
        newAccountPubkey: mint.publicKey,
        space: 82,
        lamports: await connection.getMinimumBalanceForRentExemption(82),
        programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,
    }), serum_1.TokenInstructions.initializeMint({
        mint: mint.publicKey,
        decimals: 0,
        mintAuthority: payer.publicKey,
    }), web3_js_1.SystemProgram.createAccount({
        fromPubkey: payer.publicKey,
        newAccountPubkey: vault.publicKey,
        space: 165,
        lamports: await connection.getMinimumBalanceForRentExemption(165),
        programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,
    }), serum_1.TokenInstructions.initializeAccount({
        account: vault.publicKey,
        mint: mint.publicKey,
        owner: payer.publicKey,
    }), serum_1.TokenInstructions.mintTo({
        mint: mint.publicKey,
        destination: vault.publicKey,
        amount: new bn_js_1.default(10000),
        mintAuthority: payer.publicKey,
    }));
    await sendAndConfirmTransaction(connection, txn, [payer, mint, vault]);
    return [mint.publicKey, vault.publicKey];
}
// eslint-disable-next-line @typescript-eslint/no-unused-vars
async function createUserAccounts(connection, payer, pool) {
    const poolTokenAccount = new web3_js_1.Account();
    const assetAccounts = [];
    const lamports = await connection.getMinimumBalanceForRentExemption(165);
    const txn = new web3_js_1.Transaction();
    txn.add(web3_js_1.SystemProgram.createAccount({
        fromPubkey: payer.publicKey,
        newAccountPubkey: poolTokenAccount.publicKey,
        space: 165,
        lamports,
        programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,
    }), serum_1.TokenInstructions.initializeAccount({
        account: poolTokenAccount.publicKey,
        mint: pool.state.poolTokenMint,
        owner: payer.publicKey,
    }));
    pool.state.assets.forEach(({ mint }) => {
        const account = new web3_js_1.Account();
        assetAccounts.push(account);
        txn.add(web3_js_1.SystemProgram.createAccount({
            fromPubkey: payer.publicKey,
            newAccountPubkey: account.publicKey,
            space: 165,
            lamports,
            programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,
        }), serum_1.TokenInstructions.initializeAccount({
            account: account.publicKey,
            mint,
            owner: payer.publicKey,
        }));
    });
    txn.feePayer = payer.publicKey;
    await sendAndConfirmTransaction(connection, txn, [
        payer,
        poolTokenAccount,
        ...assetAccounts,
    ]);
    return {
        owner: payer.publicKey,
        poolTokenAccount: poolTokenAccount.publicKey,
        assetAccounts: assetAccounts.map(account => account.publicKey),
    };
}
async function sendAndConfirmTransaction(connection, transaction, signers) {
    const txid = await connection.sendTransaction(transaction, signers, {
        preflightCommitment: 'recent',
    });
    await connection.confirmTransaction(txid, 'recent');
    return txid;
}
doStuff().catch(e => console.error(e));
//# sourceMappingURL=create-pool-and-do-stuff-with-it.js.map