/// <reference types="node" />
import { Layout } from '@project-serum/borsh';
import { PublicKey } from '@solana/web3.js';
import BN from 'bn.js';
/**
 * Decoded pool state.
 */
export interface PoolState {
    /** Token mint address for the pool token. */
    poolTokenMint: PublicKey;
    /** Assets in the pool. */
    assets: AssetInfo[];
    /** Owner of the assets in the pool. */
    vaultSigner: PublicKey;
    /** Nonce used to generate `vaultSigner`; only used internally by the pool program. */
    vaultSignerNonce: number;
    /** Accounts that must be included in requests to create or redeem tokens. */
    accountParams: ParamDesc[];
    /** User-friendly name for the pool. */
    name: string;
    /** Token vault address for fees collected by the pool for LQD. */
    lqdFeeVault: PublicKey;
    /** Token vault address for fees collected by the pool for the pool initializer. */
    initializerFeeVault: PublicKey;
    /** Fee on creations/redemptions, times 10^6. */
    feeRate: number;
    /** Admin for the pool. Not used by default but may have pool-specific semantics. */
    adminKey: PublicKey | null;
    /** Custom pool-specific state. */
    customState: Buffer;
}
/** Describes one of the assets in the pool. */
export interface AssetInfo {
    /** Token mint address for the asset. */
    mint: PublicKey;
    /** Token vault address for the asset. */
    vaultAddress: PublicKey;
}
export interface ParamDesc {
    address: PublicKey;
    writable: boolean;
}
export declare type PoolRequest = {
    initialize: InitializePoolRequest;
} | {
    getBasket: PoolAction;
} | {
    execute: PoolAction;
};
export interface InitializePoolRequest {
    vaultSignerNonce: number;
    assetsLength: number;
    poolName: string;
    feeRate: number;
    customData: Buffer;
}
export declare type PoolAction = {
    create: BN;
} | {
    redeem: BN;
} | {
    swap: Basket;
};
export interface Basket {
    quantities: BN[];
}
export declare const AssetInfo: Layout<AssetInfo>;
export declare const ParamDesc: Layout<ParamDesc>;
export declare const POOL_STATE_TAG: BN;
export declare const PoolState: Layout<PoolState>;
export declare const Basket: Layout<Basket>;
export declare const PoolAction: Layout<PoolAction>;
export declare const InitializePoolRequest: Layout<InitializePoolRequest>;
export declare const POOL_REQUEST_TAG: BN;
export declare const PoolRequest: Layout<PoolRequest>;
export declare function isPoolState(data: Buffer): boolean;
export declare function decodePoolState(data: Buffer): PoolState;
export declare function encodePoolState(state: PoolState): Buffer;
export declare function encodePoolRequest(poolRequest: PoolRequest): Buffer;
export declare function decodePoolRequest(data: Buffer): PoolRequest;
//# sourceMappingURL=schema.d.ts.map